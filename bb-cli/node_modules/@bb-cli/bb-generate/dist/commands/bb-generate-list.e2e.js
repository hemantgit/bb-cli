'use strict';

var _blueTape = require('blue-tape');

var _util = require('util');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _helpers = require('../../../../test/helpers');

var _helpers2 = _interopRequireDefault(_helpers);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var bin = _path2.default.resolve(__dirname, '../../bin/bb-generate-list.js');
var setup = function setup() {
  var mockedNodeModulesPath = _path2.default.resolve(__dirname, '../../test/fixtures/generators');
  var mockOut = 'console.log(\'' + mockedNodeModulesPath + '\')';
  return (0, _helpers.mockNpm)('root', mockOut);
};
var teardown = function teardown(unmock) {
  return unmock();
};

(0, _blueTape.test)('e2e :: bb-generate-list :: default list', function (assert) {
  var cmd = [bin];
  return setup().then(function (unmock) {
    (0, _helpers2.default)(cmd).then(function (res) {
      var actual = res.stdout.includes('widget-bb-ng');
      var expected = true;
      assert.equal(actual, expected, 'Should display the widget generator');
      return res;
    }).then(function (res) {
      var actual = res.code;
      var expected = 0;
      assert.equal(actual, expected, 'Should exit with success exit code');
      return res;
    }).then(teardown(unmock));
  });
});

// move to integration
_blueTape.test.skip('e2e :: bb-generate-list :: with scope', function (assert) {
  var cmd = [bin, '--scope', '@backbase'];
  return (0, _helpers2.default)(cmd).then(function (res) {
    var actual = res.stdout.includes('widget-bb-ng');
    var expected = true;
    assert.equal(actual, expected, 'Should display the widget generator');
    return res;
  }).then(function (res) {
    var actual = res.code;
    var expected = 0;
    assert.equal(actual, expected, 'Should exit with success exit code');
  });
});

(0, _blueTape.test)('e2e :: bb-generate-list :: with --json format', function (assert) {
  var cmd = [bin, '-f', 'json'];
  return (0, _helpers2.default)(cmd).then(function (res) {
    var actual = (0, _util.isArray)(JSON.parse(res.stdout));
    var expected = true;
    assert.equal(actual, expected, 'Should return an Array of objects');
    return res;
  }).then(function (res) {
    var actual = res.code;
    var expected = 0;
    assert.equal(actual, expected, 'Should exit with success exit code');
  });
});

(0, _blueTape.test)('e2e :: bb-generate-list :: with empty results', function (assert) {
  var cmd = [bin, '--scope', '@non-existing-npm-scope'];
  return (0, _helpers2.default)(cmd).then(function (res) {
    var actual = res.stdout.includes('No available generators found');
    var expected = true;
    assert.equal(actual, expected, 'Should display the no results message');
    return res;
  }).then(function (res) {
    var actual = res.code;
    var expected = 0;
    assert.equal(actual, expected, 'Should exit with success exit code');
  });
});
//# sourceMappingURL=bb-generate-list.e2e.js.map