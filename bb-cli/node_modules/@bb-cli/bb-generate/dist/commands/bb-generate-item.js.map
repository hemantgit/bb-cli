{"version":3,"sources":["../../src/commands/bb-generate-item.js"],"names":["heading","description","arguments","option","val","split","man","resolve","__dirname","parse","process","argv","generatorName","args","template","error","outputHelp","txt","replace","exit","options","exclude","output","format","scope","yes","formatOutput","res","verbose","JSON","stringify","colors","info","path","stdOut","out","stdout","write","stdErr","err","type","message","code","stack","then","outputFiles"],"mappings":";;AAKA;;;;AACA;;AACA;;AACA;;;;;;AAEA;AAVA;;;;;AAWA,UAAIA,OAAJ;;AAEA;;;;AAIA,UACGC,WADH,CACe,sEADf,EAEGC,SAFH,CAEa,mBAFb,EAGGC,MAHH,CAGU,mBAHV,EAG+B,0BAH/B,EAG2D,IAH3D,EAIGA,MAJH,CAIU,uBAJV,EAKU,2EALV,EAMU;AAAA,SAAOC,IAAIC,KAAJ,CAAU,GAAV,CAAP;AAAA,CANV,EAOGF,MAPH,CAOU,qBAPV,EAOiC,wBAPjC,EAQGA,MARH,CAQU,uBARV,EAQmC,yCARnC,EASGA,MATH,CASU,eATV,EAUU,qEAVV,EAUiF,KAVjF,EAWGG,GAXH,CAWO,eAAKC,OAAL,CAAaC,SAAb,EAAwB,+BAAxB,CAXP,EAYGC,KAZH,CAYSC,QAAQC,IAZjB;;AAcA,IAAMC,gBAAgB,UAAIC,IAAJ,CAAS,CAAT,CAAtB;AACA,IAAMC,WAAW,UAAID,IAAJ,CAAS,CAAT,KAAe,SAAhC;;AAEA,IAAI,OAAOD,aAAP,KAAyB,WAA7B,EAA0C;AACxC,YAAIG,KAAJ,CAAU,yBAAV;AACA,YAAIC,UAAJ,CAAe;AAAA,WAAOC,IAAIC,OAAJ,CAAY,cAAZ,EAA4B,cAA5B,CAAP;AAAA,GAAf;AACAR,UAAQS,IAAR,CAAa,CAAb;AACD;;AAED,IAAMC,UAAU;AACdC,WAAS,UAAIA,OADC;AAEdC,UAAQ,UAAIA,MAFE;AAGdC,UAAQ,UAAIA,MAHE;AAIdC,SAAO,UAAIA,KAJG;AAKdC,OAAK,UAAIA;AALK,CAAhB;;AAQA,IAAMC,eAAe,SAAfA,YAAe,CAACC,GAAD,EAA4B;AAAA,MAAtBJ,MAAsB,uEAAb,QAAa;;AAC/C,YAAIK,OAAJ,CAAY,SAAZ,OAA0BL,MAA1B;AACA,MAAIA,WAAW,MAAf,EAAuB,OAAOM,KAAKC,SAAL,CAAeH,GAAf,EAAoB,IAApB,EAA0B,CAA1B,CAAP;AACvB,6CAAyC,SAAGI,MAAH,CAAUC,IAAV,CAAeL,IAAIM,IAAnB,CAAzC;AACD,CAJD;;AAMA,IAAMC,SAAS,SAATA,MAAS,CAACC,GAAD,EAAS;AACtBzB,UAAQ0B,MAAR,CAAeC,KAAf,CAAwBF,GAAxB;AACD,CAFD;;AAIA,IAAMG,SAAS,SAATA,MAAS,CAACC,GAAD,EAAS;AACtB,YAAIxB,KAAJ,CAAUwB,IAAIC,IAAd,EAAoBD,IAAIE,OAAxB,cAA2CF,IAAIG,IAA/C;AACA,YAAId,OAAJ,CAAYW,IAAII,KAAhB;AACAjC,UAAQS,IAAR,CAAaoB,IAAIG,IAAjB;AACD,CAJD;;AAMA,gBAAW9B,aAAX,EAA0BE,QAA1B,EAAoCM,OAApC,EACGwB,IADH,CACQ;AAAA,SAAelB,aAAamB,WAAb,EAA0BzB,QAAQG,MAAlC,CAAf;AAAA,CADR,EAEGqB,IAFH,CAEQV,MAFR,EAEgBI,MAFhB","file":"bb-generate-item.js","sourcesContent":["/**\n * ------------------------------------------------------------------------\n * Generate Command\n * ------------------------------------------------------------------------\n */\nimport path from 'path';\nimport { cli, log, ui } from '@bb-cli/base';\nimport { name as packageName } from '../../package.json';\nimport bbGenerate from '..';\n\n// setting log heading\nlog.heading = `[${packageName}]`;\n\n/**\n * Command definition\n * Setting up options and arguments\n */\ncli\n  .description('Quickly scaffold a new Backbase component from a generator template.')\n  .arguments('<name> [template]')\n  .option('-o, --output [./]', 'Destination output path.', './')\n  .option('-x, --exclude [items]',\n          'Comma separated list of files or folders to be excluded from the template',\n          val => val.split(','))\n  .option('-s, --scope [scope]', 'Use specific npm scope')\n  .option('-f, --format [stdOut]', 'Output format (supported options: json)')\n  .option('-y, --yes [N]',\n          'Confirm with yes is the output folder already exists and replace it', false)\n  .man(path.resolve(__dirname, '../../man/bb-generate-item.md'))\n  .parse(process.argv);\n\nconst generatorName = cli.args[0];\nconst template = cli.args[1] || 'default';\n\nif (typeof generatorName === 'undefined') {\n  log.error('Missing required <name>');\n  cli.outputHelp(txt => txt.replace('bb-generate-', 'bb-generate '));\n  process.exit(1);\n}\n\nconst options = {\n  exclude: cli.exclude,\n  output: cli.output,\n  format: cli.format,\n  scope: cli.scope,\n  yes: cli.yes,\n};\n\nconst formatOutput = (res, format = 'stdOut') => {\n  log.verbose('DISPLAY', `${format}`);\n  if (format === 'json') return JSON.stringify(res, null, 2);\n  return `Item successfully generated in ${ui.colors.info(res.path)}`;\n};\n\nconst stdOut = (out) => {\n  process.stdout.write(`${out}\\n`);\n};\n\nconst stdErr = (err) => {\n  log.error(err.type, err.message, `[exit: ${err.code}]`);\n  log.verbose(err.stack);\n  process.exit(err.code);\n};\n\nbbGenerate(generatorName, template, options)\n  .then(outputFiles => formatOutput(outputFiles, options.format))\n  .then(stdOut, stdErr);\n"]}