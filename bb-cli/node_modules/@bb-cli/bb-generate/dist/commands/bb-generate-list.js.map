{"version":3,"sources":["../../src/commands/bb-generate-list.js"],"names":["R","heading","description","option","man","resolve","__dirname","parse","process","argv","options","scope","format","stdOut","out","stdout","write","stdErr","err","error","type","message","verbose","stack","exit","code","formatOutput","res","output","JSON","stringify","tableHeader","length","colors","info","listTable","table","head","colWidths","tableRow","tpls","keys","row","templates","join","displayName","version","rows","map","push","apply","toString","then","searchResults"],"mappings":";;AAMA;;;;AACA;;IAAYA,C;;AACZ;;AACA;;AACA;;;;;;AAEA;AACA,UAAIC,OAAJ;;AAEA;;;;AAfA;;;;;;AAmBA,UACGC,WADH,CACe,2BADf,EAEGC,MAFH,CAEU,qBAFV,EAEiC,qCAFjC,EAEwE,EAFxE,EAGGA,MAHH,CAGU,uBAHV,EAGmC,yCAHnC,EAIGC,GAJH,CAIO,eAAKC,OAAL,CAAaC,SAAb,EAAwB,+BAAxB,CAJP,EAKGC,KALH,CAKSC,QAAQC,IALjB;;AAQA,IAAMC,UAAU;AACdC,SAAO,UAAIA,KADG;AAEdC,UAAQ,UAAIA;AAFE,CAAhB;;AAKA,IAAMC,SAAS,SAATA,MAAS,CAACC,GAAD,EAAS;AACtBN,UAAQO,MAAR,CAAeC,KAAf,CAAwBF,GAAxB;AACD,CAFD;;AAIA,IAAMG,SAAS,SAATA,MAAS,CAACC,GAAD,EAAS;AACtB,YAAIC,KAAJ,CAAUD,IAAIE,IAAd,EAAoBF,IAAIG,OAAxB;AACA,YAAIC,OAAJ,CAAYJ,IAAIK,KAAhB;AACAf,UAAQgB,IAAR,CAAaN,IAAIO,IAAjB;AACD,CAJD;;AAMA;;;;;AAKA,IAAMC,eAAe,SAAfA,YAAe,CAACC,GAAD,EAA4B;AAAA,MAAtBf,MAAsB,uEAAb,QAAa;;AAC/C,MAAIgB,SAAS,EAAb;AACA,YAAIN,OAAJ,CAAY,SAAZ,OAA0BV,MAA1B;AACA,MAAIA,WAAW,MAAf,EAAuBgB,SAASC,KAAKC,SAAL,CAAeH,GAAf,EAAoB,IAApB,EAA0B,CAA1B,CAAT,CAAvB,KACK;AACH,QAAMI,cAAc,CAAC,MAAD,EAAS,aAAT,EAAwB,SAAxB,EAAmC,WAAnC,EAAgD,OAAhD,CAApB;AACA,QAAIJ,IAAIK,MAAR,EAAgB;AACdJ,qCAA6B,SAAGK,MAAH,CAAUC,IAAV,CAAe,+BAAf,CAA7B;AACA,gBAAIZ,OAAJ,CAAeK,IAAIK,MAAnB;AACD,KAHD,MAGO;AACLJ;AACAA,mCAA2B,SAAGK,MAAH,CAAUC,IAAV,CAAe,yBAAf,CAA3B;AACD;AACD,QAAMC,YAAY,SAAGC,KAAH,CAAS;AACzBC,YAAMN,WADmB;AAEzBO,iBAAW,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB;AAFc,KAAT,CAAlB;AAIA,QAAMC,WAAW,SAAXA,QAAW,MAAO;AACtB,UAAMC,OAAOxC,EAAEyC,IAAF,CAAOC,IAAIC,SAAX,EAAsBC,IAAtB,CAA2B,IAA3B,CAAb;AACA,aAAO,CAACF,IAAIG,WAAL,EAAkBH,IAAIxC,WAAtB,EAAmCwC,IAAII,OAAvC,EAAgDN,IAAhD,EAAsDE,IAAI/B,KAA1D,CAAP;AACD,KAHD;;AAKA,QAAMoC,OAAO/C,EAAEgD,GAAF,CAAMT,QAAN,EAAgBZ,GAAhB,CAAb;AACAQ,cAAUc,IAAV,CAAeC,KAAf,CAAqBf,SAArB,EAAgCY,IAAhC;;AAEAnB,cAAUO,UAAUgB,QAAV,EAAV;AACD;;AAED,SAAOvB,MAAP;AACD,CA7BD;;AA+BA,YAAKlB,OAAL,EACG0C,IADH,CACQ;AAAA,SAAiB1B,aAAa2B,aAAb,EAA4B3C,QAAQE,MAApC,CAAjB;AAAA,CADR,EAEGwC,IAFH,CAEQvC,MAFR,EAEgBI,MAFhB","file":"bb-generate-list.js","sourcesContent":["/**\n * ------------------------------------------------------------------------\n * List Command\n * ------------------------------------------------------------------------\n *\n */\nimport path from 'path';\nimport * as R from 'ramda';\nimport { cli, log, ui } from '@bb-cli/base';\nimport { name as packageName } from '../../package.json';\nimport { list } from '..';\n\n// setting log heading\nlog.heading = `[${packageName}]`;\n\n/**\n * Command definition\n * Setting up options and arguments\n */\ncli\n  .description('List available generators')\n  .option('-s, --scope [scope]', 'Search within a specific npm scope.', '')\n  .option('-f, --format [stdOut]', 'Output format (supported options: json)')\n  .man(path.resolve(__dirname, '../../man/bb-generate-list.md'))\n  .parse(process.argv);\n\n\nconst options = {\n  scope: cli.scope,\n  format: cli.format,\n};\n\nconst stdOut = (out) => {\n  process.stdout.write(`${out}\\n`);\n};\n\nconst stdErr = (err) => {\n  log.error(err.type, err.message);\n  log.verbose(err.stack);\n  process.exit(err.code);\n};\n\n/**\n * Formater\n * @private\n * @todo 1. move to formater.js\n */\nconst formatOutput = (res, format = 'stdOut') => {\n  let output = '';\n  log.verbose('DISPLAY', `${format}`);\n  if (format === 'json') output = JSON.stringify(res, null, 2);\n  else {\n    const tableHeader = ['Name', 'Description', 'Version', 'Templates', 'Scope'];\n    if (res.length) {\n      output = `\\nGenerate using ${ui.colors.info('bb-generate <name> [template]')}\\n`;\n      log.verbose(`${res.length} valid results`);\n    } else {\n      output = `\\nNo available generators found.\\n`;\n      output += `Try instaling ${ui.colors.info('npm i -g <package-name>')}\\n`;\n    }\n    const listTable = ui.table({\n      head: tableHeader,\n      colWidths: [20, 50, 15, 15, 20],\n    });\n    const tableRow = row => {\n      const tpls = R.keys(row.templates).join('\\n');\n      return [row.displayName, row.description, row.version, tpls, row.scope];\n    };\n\n    const rows = R.map(tableRow, res);\n    listTable.push.apply(listTable, rows);\n\n    output += listTable.toString();\n  }\n\n  return output;\n};\n\nlist(options)\n  .then(searchResults => formatOutput(searchResults, options.format))\n  .then(stdOut, stdErr);\n"]}