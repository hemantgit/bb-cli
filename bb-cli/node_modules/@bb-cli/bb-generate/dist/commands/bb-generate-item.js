'use strict';

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _base = require('@bb-cli/base');

var _package = require('../../package.json');

var _ = require('..');

var _2 = _interopRequireDefault(_);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// setting log heading
/**
 * ------------------------------------------------------------------------
 * Generate Command
 * ------------------------------------------------------------------------
 */
_base.log.heading = '[' + _package.name + ']';

/**
 * Command definition
 * Setting up options and arguments
 */
_base.cli.description('Quickly scaffold a new Backbase component from a generator template.').arguments('<name> [template]').option('-o, --output [./]', 'Destination output path.', './').option('-x, --exclude [items]', 'Comma separated list of files or folders to be excluded from the template', function (val) {
  return val.split(',');
}).option('-s, --scope [scope]', 'Use specific npm scope').option('-f, --format [stdOut]', 'Output format (supported options: json)').option('-y, --yes [N]', 'Confirm with yes is the output folder already exists and replace it', false).man(_path2.default.resolve(__dirname, '../../man/bb-generate-item.md')).parse(process.argv);

var generatorName = _base.cli.args[0];
var template = _base.cli.args[1] || 'default';

if (typeof generatorName === 'undefined') {
  _base.log.error('Missing required <name>');
  _base.cli.outputHelp(function (txt) {
    return txt.replace('bb-generate-', 'bb-generate ');
  });
  process.exit(1);
}

var options = {
  exclude: _base.cli.exclude,
  output: _base.cli.output,
  format: _base.cli.format,
  scope: _base.cli.scope,
  yes: _base.cli.yes
};

var formatOutput = function formatOutput(res) {
  var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'stdOut';

  _base.log.verbose('DISPLAY', '' + format);
  if (format === 'json') return JSON.stringify(res, null, 2);
  return 'Item successfully generated in ' + _base.ui.colors.info(res.path);
};

var stdOut = function stdOut(out) {
  process.stdout.write(out + '\n');
};

var stdErr = function stdErr(err) {
  _base.log.error(err.type, err.message, '[exit: ' + err.code + ']');
  _base.log.verbose(err.stack);
  process.exit(err.code);
};

(0, _2.default)(generatorName, template, options).then(function (outputFiles) {
  return formatOutput(outputFiles, options.format);
}).then(stdOut, stdErr);
//# sourceMappingURL=bb-generate-item.js.map