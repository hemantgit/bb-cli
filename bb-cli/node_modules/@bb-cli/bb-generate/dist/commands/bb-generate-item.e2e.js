'use strict';

var _blueTape = require('blue-tape');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _base = require('@bb-cli/base');

var _helpers = require('../../../../test/helpers');

var _helpers2 = _interopRequireDefault(_helpers);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var bin = _path2.default.resolve(__dirname, '../../bin/bb-generate-item.js');

// Setup phase create fixtures
var setup = function setup() {
  return (0, _helpers.createTmpDir)();
};
// Dispose of your fixtures here.
var teardown = function teardown() {};

var tmpOut = setup().name;
/**
* ------------------------------------------------------------------------
* Test Success
* ------------------------------------------------------------------------
*/
(0, _blueTape.test)('e2e :: bb-generate-item :: file-system resolve', function (assert) {
  var args = 'test/fixtures/generators/file-system';
  var cmd = [bin, args, '-o', tmpOut, '-x', 'exclude-me.txt'];
  var name = 'dummy';
  var prompts = [name, _helpers.Keys.ENTER];

  return (0, _helpers2.default)(cmd, prompts).then(function (res) {
    var dirname = _path2.default.resolve(tmpOut, name);
    var actual = res.stdout.includes('Item successfully generated');
    var expected = true;
    assert.equal(actual, expected, 'Should contain the the successfully message');
    return Object.assign({}, {
      dirname: dirname,
      name: name
    }, res);
  }).then(function (res) {
    var actual = res.code;
    var expected = 0;
    assert.equal(actual, expected, 'Should exit with success exit code');
    return res;
  }).then(function (res) {
    var actual = _base.sh.ls('-R', res.dirname).stdout.trim();
    var expected = ['README.md'].join('\n');
    assert.equal(actual, expected, 'Should exclude the excluded item.');
    return res;
  }).then(function (res) {
    var actual = _base.sh.cat(_path2.default.resolve(res.dirname, 'README.md')).stdout;
    var expected = '# dummy\n';
    assert.equal(actual, expected, 'Should generate a README file with the prompted name.');
    return res;
  }).then(teardown);
});

(0, _blueTape.test)('e2e :: bb-generate-item :: widget-bb-ng-legacy', function (assert) {
  var args = 'test/fixtures/generators/generator-widget-bb-ng-legacy';
  var cmd = [bin, args, '-o', tmpOut];
  var name = 'my-bb-ng-widget';
  var prompts = ['My BB ng widget', _helpers.Keys.ENTER, // name
  'Some title', _helpers.Keys.ENTER, // title
  'Some description', _helpers.Keys.ENTER];
  return (0, _helpers2.default)(cmd, prompts).then(function (res) {
    var dirname = _path2.default.resolve(tmpOut, name);
    var actual = res.stdout.includes('Item successfully generated');
    var expected = true;
    assert.equal(res.code, 0, 'Should exit with success exit code');
    assert.equal(actual, expected, 'Should contain the the successfully message');
    return {
      dirname: dirname,
      name: name
    };
  }).then(function (res) {
    var actual = _base.sh.ls('-R', res.dirname).stdout.trim();
    var expected = ['assets', 'assets/icon.png', 'index.html', 'model.xml', 'package.json', 'README.md', 'scripts', 'scripts/controller.js', 'scripts/controller.spec.js', 'scripts/index.js', 'scripts/index.spec.js'].join('\n');
    assert.equal(actual, expected, 'Should generate all files from the template.');
    return res;
  }).then(function (res) {
    var fixedModelXML = _path2.default.resolve(__dirname, '../../test/fixtures/widget-bb-ng/model.xml');
    var generatedModelXML = _path2.default.resolve(res.dirname, 'model.xml');
    var actual = _fs2.default.readFileSync(generatedModelXML, 'utf-8');
    var expected = _fs2.default.readFileSync(fixedModelXML, 'utf-8');

    assert.equal(actual, expected, 'Should generate the transformed model.xml');
    return res;
  }).then(teardown);
});

/**
* ------------------------------------------------------------------------
* Test Fails
* ------------------------------------------------------------------------
*/
(0, _blueTape.test)('e2e :: bb-generate-item :: non existing generator', function (assert) {
  var args = 'i-do-not-exist-name';
  var cmd = [bin, args];

  return (0, _helpers2.default)(cmd).then(function (res) {
    var actual = res.stderr.includes('Unable to find');
    var expected = true;
    assert.equal(actual, expected, 'Should display the `Unable to find` message');
    return res;
  }).then(function (res) {
    var actual = res.code;
    var expected = 1;
    assert.equal(actual, expected, 'Should exit with partial success exit code');
    return res;
  });
});
//# sourceMappingURL=bb-generate-item.e2e.js.map