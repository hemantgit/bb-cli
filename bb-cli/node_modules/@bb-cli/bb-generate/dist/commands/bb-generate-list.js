'use strict';

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _ramda = require('ramda');

var R = _interopRequireWildcard(_ramda);

var _base = require('@bb-cli/base');

var _package = require('../../package.json');

var _ = require('..');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// setting log heading
_base.log.heading = '[' + _package.name + ']';

/**
 * Command definition
 * Setting up options and arguments
 */
/**
 * ------------------------------------------------------------------------
 * List Command
 * ------------------------------------------------------------------------
 *
 */
_base.cli.description('List available generators').option('-s, --scope [scope]', 'Search within a specific npm scope.', '').option('-f, --format [stdOut]', 'Output format (supported options: json)').man(_path2.default.resolve(__dirname, '../../man/bb-generate-list.md')).parse(process.argv);

var options = {
  scope: _base.cli.scope,
  format: _base.cli.format
};

var stdOut = function stdOut(out) {
  process.stdout.write(out + '\n');
};

var stdErr = function stdErr(err) {
  _base.log.error(err.type, err.message);
  _base.log.verbose(err.stack);
  process.exit(err.code);
};

/**
 * Formater
 * @private
 * @todo 1. move to formater.js
 */
var formatOutput = function formatOutput(res) {
  var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'stdOut';

  var output = '';
  _base.log.verbose('DISPLAY', '' + format);
  if (format === 'json') output = JSON.stringify(res, null, 2);else {
    var tableHeader = ['Name', 'Description', 'Version', 'Templates', 'Scope'];
    if (res.length) {
      output = '\nGenerate using ' + _base.ui.colors.info('bb-generate <name> [template]') + '\n';
      _base.log.verbose(res.length + ' valid results');
    } else {
      output = '\nNo available generators found.\n';
      output += 'Try instaling ' + _base.ui.colors.info('npm i -g <package-name>') + '\n';
    }
    var listTable = _base.ui.table({
      head: tableHeader,
      colWidths: [20, 50, 15, 15, 20]
    });
    var tableRow = function tableRow(row) {
      var tpls = R.keys(row.templates).join('\n');
      return [row.displayName, row.description, row.version, tpls, row.scope];
    };

    var rows = R.map(tableRow, res);
    listTable.push.apply(listTable, rows);

    output += listTable.toString();
  }

  return output;
};

(0, _.list)(options).then(function (searchResults) {
  return formatOutput(searchResults, options.format);
}).then(stdOut, stdErr);
//# sourceMappingURL=bb-generate-list.js.map