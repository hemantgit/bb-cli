{"version":3,"sources":["../../src/commands/bb-generate-list.e2e.js"],"names":["bin","resolve","__dirname","setup","mockedNodeModulesPath","mockOut","teardown","unmock","cmd","then","actual","res","stdout","includes","expected","assert","equal","code","skip","JSON","parse"],"mappings":"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","file":"bb-generate-list.e2e.js","sourcesContent":["import { test } from 'blue-tape';\nimport { isArray } from 'util';\nimport path from 'path';\nimport run, { mockNpm } from '../../../../test/helpers';\n\nconst bin = path.resolve(__dirname, '../../bin/bb-generate-list.js');\nconst setup = () => {\n  const mockedNodeModulesPath = path.resolve(__dirname, '../../test/fixtures/generators');\n  const mockOut = `console.log('${mockedNodeModulesPath}')`;\n  return mockNpm('root', mockOut);\n};\nconst teardown = (unmock) => unmock();\n\ntest('e2e :: bb-generate-list :: default list', assert => {\n  const cmd = [bin];\n  return setup().then(unmock => {\n    run(cmd).then(res => {\n      const actual = res.stdout.includes('widget-bb-ng');\n      const expected = true;\n      assert.equal(actual, expected, 'Should display the widget generator');\n      return res;\n    }).then(res => {\n      const actual = res.code;\n      const expected = 0;\n      assert.equal(actual, expected, 'Should exit with success exit code');\n      return res;\n    }).then(teardown(unmock));\n  });\n});\n\n// move to integration\ntest.skip('e2e :: bb-generate-list :: with scope', assert => {\n  const cmd = [bin,\n    '--scope', '@backbase',\n  ];\n  return run(cmd).then(res => {\n    const actual = res.stdout.includes('widget-bb-ng');\n    const expected = true;\n    assert.equal(actual, expected, 'Should display the widget generator');\n    return res;\n  }).then(res => {\n    const actual = res.code;\n    const expected = 0;\n    assert.equal(actual, expected, 'Should exit with success exit code');\n  });\n});\n\ntest('e2e :: bb-generate-list :: with --json format', assert => {\n  const cmd = [bin,\n    '-f', 'json',\n  ];\n  return run(cmd).then(res => {\n    const actual = isArray(JSON.parse(res.stdout));\n    const expected = true;\n    assert.equal(actual, expected, 'Should return an Array of objects');\n    return res;\n  }).then(res => {\n    const actual = res.code;\n    const expected = 0;\n    assert.equal(actual, expected, 'Should exit with success exit code');\n  });\n});\n\ntest('e2e :: bb-generate-list :: with empty results', assert => {\n  const cmd = [bin,\n    '--scope', '@non-existing-npm-scope',\n  ];\n  return run(cmd).then(res => {\n    const actual = res.stdout.includes('No available generators found');\n    const expected = true;\n    assert.equal(actual, expected, 'Should display the no results message');\n    return res;\n  }).then(res => {\n    const actual = res.code;\n    const expected = 0;\n    assert.equal(actual, expected, 'Should exit with success exit code');\n  });\n});\n"]}