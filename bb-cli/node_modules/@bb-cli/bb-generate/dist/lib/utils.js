'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isFile = exports.isDir = exports.debug = exports.pipeline = undefined;

var _ramda = require('ramda');

var R = _interopRequireWildcard(_ramda);

var _base = require('@bb-cli/base');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

// Take a list (Array) of functions and end up with a single Promise
// that represents all of those functions composed to run in a sequence.
// https://medium.com/@dtipson/more-functional-javascript-reducing-promises-ramda-js-arrow-functions-again-c1f90e0a79d0
var pipeline = function pipeline() {
  for (var _len = arguments.length, list = Array(_len), _key = 0; _key < _len; _key++) {
    list[_key] = arguments[_key];
  }

  return function (accum) {
    return R.flatten(list).reduce(function (acc, fn) {
      return acc.then(fn);
    }, Promise.resolve(accum));
  };
};

var debug = function debug(res) {
  return process.stdout.write(JSON.stringify(res, null, 2));
};

var isDir = function isDir(d) {
  return _base.sh.test('-d', d);
};

var isFile = function isFile(f) {
  return _base.sh.test('-f', f);
};

exports.pipeline = pipeline;
exports.debug = debug;
exports.isDir = isDir;
exports.isFile = isFile;
//# sourceMappingURL=utils.js.map