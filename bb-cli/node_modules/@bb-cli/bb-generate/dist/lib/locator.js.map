{"version":3,"sources":["../../src/lib/locator.js"],"names":["R","statFileExistsFilter","code","fileExistsSync","pipe","statSync","parseFileSync","flip","readFileSync","JSON","parse","execShellComand","result","exec","cmd","silent","type","message","stderr","trim","stdout","GLOB_PATTERN","getLocalNpmRootNodeModules","getGlobalNpmRootNodeModules","createGlobPattern","scope","scopeGlob","globs","pattern","join","pop","verbose","search","npmRoot","results","foundMatches","match","push","resolve","Promise","reject","globSearch","cwd","on","searchLocal","searchGlobal","searchNodeModules","patern","all","then","flatten","createGeneratorObject","generatorName","str","replace","getScopeFromName","splitPackageName","split","length","pickPackageProperties","pick","preparePackageMeta","dirName","dirname","packageJsonFile","templatePaths","main","directories","map","normalize","templatePath","merge","default","packageJson","displayName","name","templates","omit","checkTemplatePaths","obj","err","warn","options","filter"],"mappings":"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","file":"locator.js","sourcesContent":["/**\n * @todo\n * - handle no results output\n * - optimize map calls to use transducer\n * - cache result in $HOME\n * - make preparePackageMeta a bit more clear\n * - use Future instead of Promises\n * - sort by scope DESC\n * - use Empty http://ramdajs.com/docs/#empty for empty results\n *\n */\nimport path from 'path';\nimport fs from 'fs';\nimport { Glob } from 'glob';\nimport * as R from 'ramda';\nimport { log, sh, error } from '@bb-cli/base';\nimport { pipeline } from './utils';\n\nconst statFileExistsFilter = (code) => code !== 'ENOENT';\n\nconst fileExistsSync = R.pipe(fs.statSync, statFileExistsFilter);\n\nconst parseFileSync = R.pipe(R.flip(fs.readFileSync)('utf-8'), JSON.parse);\n\nconst execShellComand = cmd => {\n  const result = sh.exec(cmd, { silent: true });\n  if (result.code !== 0) {\n    throw error({\n      type: 'E_EXEC',\n      code: result.code,\n      message: result.stderr.trim(),\n    });\n  }\n  return result.stdout.trim();\n};\n\nconst GLOB_PATTERN = '?(bb-generator-*|generator-*)';\n\nconst getLocalNpmRootNodeModules = () => {\n  const cmd = 'npm root --loglevel error';\n  return execShellComand(cmd);\n};\nconst getGlobalNpmRootNodeModules = () => {\n  const cmd = 'npm root --global --loglevel error';\n  return execShellComand(cmd);\n};\n\nconst createGlobPattern = (scope) => {\n  const scopeGlob = scope || '@*';\n  const globs = [\n    `${scopeGlob}/${GLOB_PATTERN}/package.json`,\n    `./${GLOB_PATTERN}/package.json`,\n  ];\n  let pattern = `{${globs.join(',')}}`;\n  if (scope) {\n    globs.pop();\n    // unwrap { }\n    pattern = `${globs.join(',')}`;\n  }\n  log.verbose('GLOB', pattern);\n  return pattern;\n};\n\nconst search = (pattern, npmRoot) => {\n  const results = [];\n\n  const foundMatches = (match) => {\n    results.push(path.resolve(npmRoot, match));\n    log.verbose('PACKAGE', path.resolve(npmRoot, match));\n  };\n\n  return new Promise((resolve, reject) => {\n    const globSearch = new Glob(pattern, { cwd: npmRoot });\n    globSearch.on('error', reject);\n    globSearch.on('match', foundMatches);\n    globSearch.on('end', () => resolve(results));\n  });\n};\n\nconst searchLocal = (pattern) => search(pattern, getLocalNpmRootNodeModules());\nconst searchGlobal = (pattern) => search(pattern, getGlobalNpmRootNodeModules());\n\n/**\n * Searches generators in global and local node_modules\n * @private\n * @func\n * @since v2.0.0\n * @category List\n * @sig String -> Promise Array\n * @param {String} GLob Pattern\n * @return {Promise} List of results\n */\nconst searchNodeModules = (patern) => Promise.all([\n  searchGlobal(patern),\n  searchLocal(patern),\n]).then(R.flatten);\n\n/**\n * Creates a Generator Object from the given package.json file\n * @todo Split into smaller composable functions\n * @private\n * :: String -> Array\n */\n\nconst createGeneratorObject = packageJsonFile => {\n  const generatorName = (str) => str.replace(/^([^\\/]+\\/)?(bb-)?generator-/, '');\n\n  const getScopeFromName = (str) => {\n    const splitPackageName = str.split('/');\n    return splitPackageName.length > 1 ? splitPackageName[0] : '';\n  };\n  const pickPackageProperties = R.pick([\n    'name',\n    'main',\n    'keywords', // @todo filter by tags\n    'description',\n    'version',\n    'directories',\n  ]);\n\n  const preparePackageMeta = packageJson => {\n    const dirName = path.dirname(packageJsonFile);\n    const templatePaths = (main = 'index.js', directories = {}) => R.map(\n      templatePath => path.resolve(dirName, path.normalize(templatePath, main)),\n      R.merge({ default: main }, directories)\n    );\n\n    return R.merge(packageJson, {\n      displayName: generatorName(packageJson.name),\n      templates: templatePaths(packageJson.main, packageJson.directories),\n      scope: getScopeFromName(packageJson.name),\n      dirName,\n    });\n  };\n\n  return R.pipe(\n    parseFileSync,\n    pickPackageProperties,\n    preparePackageMeta,\n    R.omit(['main', 'directories'])\n  )(packageJsonFile);\n};\n\n/**\n * Tries to see if the template paths exists\n * @private\n * :: Object -> Object\n */\nconst checkTemplatePaths = obj => {\n  try {\n    return R.map(fileExistsSync, obj.templates);\n  } catch (err) {\n    log.warn(err);\n    log.warn(`Unable to include generator ${obj.dirName}`);\n    return false;\n  }\n};\n\n/**\n * Get available generators\n * @module @bb-cli/bb-generate.list\n * @type {Object}\n * @since v2.0.0\n * @public\n * @returns {Promise.<GeneratorsFoundCollection>} Array of objects\n * @example\n *\n * ```javascript\n * import { list } from '@bb-cli/bb-generate';\n *\n * const options {\n *  scope: '@backbase',\n *  format: 'json',\n * };\n *\n * list(options)\n *   .then(handleSearchResults, handleErrors);\n * ```\n */\nexport default (options = {}) => {\n  const pattern = createGlobPattern(options.scope);\n  return pipeline(\n      searchNodeModules,\n      R.map(createGeneratorObject),\n      R.filter(checkTemplatePaths)\n    )(pattern);\n};\n"]}