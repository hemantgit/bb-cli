'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _base = require('@bb-cli/base');

var _ramda = require('ramda');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _utils = require('./utils');

var _loader = require('./loader');

var _loader2 = _interopRequireDefault(_loader);

var _locator = require('./locator');

var _locator2 = _interopRequireDefault(_locator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var filterByName = function filterByName(resolversList, name) {
  _base.log.verbose('FILTER', 'by name ' + name);
  var resolverObj = (0, _ramda.find)((0, _ramda.propEq)('displayName', name))(resolversList);
  // not found in the list throw an error
  if ((0, _ramda.isNil)(resolverObj)) {
    throw (0, _base.error)({
      type: 'E_NOT_FOUND',
      message: 'Unable to find ' + name + ' generator.'
    });
  }
  return resolverObj;
};

var filterByTemplate = function filterByTemplate(resolverObj) {
  var templateName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'default';

  _base.log.verbose('FILTER', 'by template ' + templateName);
  var templateFilePath = (0, _ramda.prop)('templates', resolverObj)[templateName];
  if ((0, _ramda.isNil)(templateFilePath)) {
    throw (0, _base.error)({
      type: 'E_NOT_FOUND',
      message: 'Unable to find ' + templateName + ' template.'
    });
  }
  return templateFilePath;
};

function resolveByFS(templateFilePath) {
  try {
    var generatorApi = (0, _loader2.default)(templateFilePath);
    return Promise.resolve(generatorApi);
  } catch (err) {
    return Promise.reject(err);
  }
}

function resolveByLocator(name, template, scope) {
  return (0, _locator2.default)(scope).then(function (resolversList) {
    return filterByName(resolversList, name);
  }).then(function (resolverObj) {
    return filterByTemplate(resolverObj, template);
  }).then(resolveByFS);
}

/**
 * @private
 * @todo resolve by git url.
 * @todo if not found, try and install.
 */
var resolver = function resolver(name, template, scope) {
  if ((0, _utils.isDir)(name) || (0, _utils.isFile)(name)) {
    _base.log.verbose('RESOLVE', 'from fs template ' + name);
    return resolveByFS(_path2.default.resolve(name));
  }

  _base.log.verbose('RESOLVE', 'from npm template ' + name);
  return resolveByLocator(name, template, scope);
};

exports.default = resolver;
//# sourceMappingURL=resolver.js.map