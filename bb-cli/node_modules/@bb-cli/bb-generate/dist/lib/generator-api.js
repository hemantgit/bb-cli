'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.preset = exports.validate = exports.filter = undefined;

var _base = require('@bb-cli/base');

var _ramda = require('ramda');

var R = _interopRequireWildcard(_ramda);

var _lodash = require('lodash');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

/**
 * Validation utilities for generatorAPI
 * @public
 * @name validate
 * @memberOf module:generatorAPI
 */
var _validate = {};

/**
 * Checks if the given version is a semver valid version
 * @see http://semver.org/
 * @public
 * @name isSemver
 * @memberOf module:generatorAPI.validate
 * @since v2.0.0
 * @type {Function}
 * @sig (String , String) -> Boolean
 * @param {String} version Version value
 * @param {String} message Message in case of not valid
 * @returns {Boolean}
 * @example
 * Basic usage:
 *
 * ```javascript
 * const isValidVersion = validate.isSemver('v1',
 *   'Version field needs to be a semver valid version!') => false
 * ```
 */
_validate.isSemver = function (val, msg) {
  return _base.semver.valid(val) ? true : msg;
};

/**
 * Checks if the given value is empty
 * @public
 * @name isRequired
 * @memberOf module:generatorAPI.validate
 * @sig (String , String) -> Boolean
 * @since v2.0.0
 * @type {Function}
 * @param {String} Version testing value
 * @param {String} message Message in case required value
 * @returns {Boolean}
 * @example
 *
 * Basic usage:
 * ```javascript
 * const isMandatory = validate.isRequired('some-value', 'This field is mandatory');
 * ```
 */
_validate.isRequired = function (val, msg) {
  return R.not((0, _lodash.isEmpty)(val)) ? true : msg;
};

/**
 * Filter or transformers utilities for generatorAPI
 * @public
 * @name filter
 * @memberOf module:generatorAPI
 */
var _filter = {};

/**
 * Filter or transformers utilities for generatorAPI
 * @public
 * @name camelCase
 * @memberOf module:generatorAPI.filter
 * @see https://lodash.com/docs#camelCase
 */
_filter.camelCase = _lodash.camelCase;
/**
 * @public
 * @name lowerCase
 * @memberOf module:generatorAPI.filter
 * @see https://lodash.com/docs#lowerCase
 */
_filter.lowerCase = _lodash.lowerCase;
/**
 * @public
 * @name kebabCase
 * @memberOf module:generatorAPI.filter
 * @see https://lodash.com/docs#kebabCase
 */
_filter.kebabCase = _lodash.kebabCase;
/**
 * @public
 * @name startCase
 * @memberOf module:generatorAPI.filter
 * @see https://lodash.com/docs#startCase
 */
_filter.startCase = _lodash.startCase;
/**
 * @public
 * @name capitalize
 * @memberOf module:generatorAPI.filter
 * @see https://lodash.com/docs#capitalize
 */
_filter.capitalize = _lodash.capitalize;
/**
 * @public
 * @name escape
 * @memberOf module:generatorAPI.filter
 * @see https://lodash.com/docs#escape
 */
_filter.escape = _lodash.escape;
/**
 * @public
 * @name unescape
 * @memberOf module:generatorAPI.filter
 * @see https://lodash.com/docs#unescape
 */
_filter.unescape = _lodash.unescape;
/**
 * @public
 * @name template
 * @memberOf module:generatorAPI.filter
 * @see https://lodash.com/docs#template
 */
_filter.template = _lodash.template;
/**
 * @public
 * @name trim
 * @memberOf module:generatorAPI.filter
 * @see https://lodash.com/docs#trim
 */
_filter.trim = _lodash.trim;
/**
 * @public
 * @name truncate
 * @memberOf module:generatorAPI.filter
 * @see https://lodash.com/docs#truncate
 */
_filter.truncate = _lodash.truncate;
/**
 * @public
 * @name replace
 * @memberOf module:generatorAPI.filter
 * @see https://lodash.com/docs#replace
 */
_filter.replace = _lodash.replace;
/**
 * @public
 * @name upperFirst
 * @memberOf module:generatorAPI.filter
 * @see https://lodash.com/docs#upperFirst
 */
_filter.upperFirst = _lodash.upperFirst;
/**
 * @public
 * @name lowerFirst
 * @memberOf module:generatorAPI.filter
 * @see https://lodash.com/docs#lowerFirst
 */
_filter.lowerFirst = _lodash.lowerFirst;
/**
 * @public
 * @name deburr
 * @memberOf module:generatorAPI.filter
 * @see https://lodash.com/docs#deburr
 */
_filter.deburr = _lodash.deburr;
/**
 * Add a prefix to the given value
 * @public
 * @name prefix
 * @memberOf module:generatorAPI.filter
 * @type {Function}
 * @since v2.0.0
 * @sig (String , String) -> String
 * @param {String} Version testing value
 * @param {String} message Message in case required value
 * @returns {String} Prefixed value
 * @example
 *
 * ```javascript
 * const preValue = filter.prefix('widget', 'bb-') => 'bb-widget'
 * ```
 */
_filter.prefix = function (val) {
  var pre = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  return !(0, _lodash.startsWith)(val, pre) ? '' + pre + val : val;
};

/**
* ------------------------------------------------------------------------
* Presets
* ------------------------------------------------------------------------
*/
/**
 * Inquirer predefined prompts
 * @see https://github.com/SBoudrias/Inquirer.js#questions
 * @public
 * @module prompts
 */
var preset = {};

/**
 * Name prompt a mandatory question, is returning a kebabCase value
 * @public
 * @name name
 * @default
 * @memberOf module:prompts
 * @type {Object}
 * @since v2.0.0
 * @example
 *
 * ```javascript
 * prompts.name -> 'some value' -> 'some-value'
 * ```
 */

preset.name = {
  name: 'name',
  message: 'Name',
  filter: function filter(value) {
    return R.pipe(_lodash.deburr, _lodash.kebabCase)(value);
  },
  validate: function validate(value) {
    return _validate.isRequired(value, 'Name field is required!');
  }
};

/**
 * Description prompt
 * Required description value
 * @name description
 * @public
 * @memberOf module:prompts
 * @type {Object}
 * @since v2.0.0
 * @example
 *
 * ```javascript
 * prompts.description -> 'some value' -> 'Some value'
 * ```
 */

preset.description = {
  name: 'description',
  message: 'Description',
  filter: function filter(value) {
    return _filter.capitalize(value);
  },
  validate: function validate(value) {
    return _validate.isRequired(value, 'Description field is required!');
  }
};

/**
 * Version prompt,
 * A Required semver value
 * @name version
 * @see https://docs.npmjs.com/getting-started/semantic-versioning
 * @public
 * @default 0.1.0-alpha.0
 * @memberOf module:prompts
 * @type {Object}
 * @since v2.0.0
 * @example
 *
 * ```javascript
 * prompts.version -> '' -> '0.1.0-alpha.0'
 * ```
 */
preset.version = {
  name: 'version',
  message: 'Version',
  default: '0.1.0-alpha.0',
  filter: function filter(value) {
    return value;
  },
  validate: function validate(value) {
    return _validate.isSemver(value, 'Version field needs to be a semver valid version!');
  }
};

/**
 * Factory to create generator API prompts
 * Prompts are based on the Inquirer.js prompt api
 * @see https://github.com/SBoudrias/Inquirer.js#questions
 * @module generatorAPI
 * @name generatorAPI
 * @public
 * @since v2.0.0
 * @type {Function}
 * @param {generator} api Default generator
 * @param {prompts} prompts Default prompts
 * @param {inquirer} Inquirer.js https://github.com/SBoudrias/Inquirer.js#inquirerpromptquestions---promise
 * @return {Function} new prompt generator
 * @example
 *
 * Basic default Example
 *
 * ```javascript
 * module.exports = function(api, prompts, inquirer) {
 *   return api(prompts);
 * };
 * ```
 *
 * With my prompts:
 *
 * ```javascript
 * module.exports = function(api, prompts) {
 *   const myPrompts = [{
 *     type: 'password',
 *     name: 'password',
 *     message: 'What is your password',
 *     default: 'admin'
 *   }]
 *  return api(myPrompts);
 * };
 * ```
 *
 * Extend default prompts:
 *
 * ```javascript
 * module.exports = function(api, prompts) {
 *   const myPrompts = [
 *     Object.assign(prompts.name, {
 *       message: 'What is your username',
 *     }),
 *    {
 *     type: 'password',
 *     name: 'password',
 *     message: 'What is your password',
 *     default: answers => `bb-${answer.name}`, // use previous answers
 *   }]
 *  return api(myPrompts);
 * };
 * ```
 *
 * Advanced example:
 *
 * ```javascript
 * module.exports = function(api, prompts) {
 *  const myPrompts = [{
 *    name: 'scope',
 *    message: 'Scope',
 *    default: '@backbase',
 *    filter: value => api.filter.prefix(value, 'bb-'),
 *    validate: value => api.validate.isRequired(value, 'Scope field is required!'),
 *  }];
 *
 *  const setup = {
 *    hooks: {
 *      preTransform: function(data) {
 *        data.name = data.scope ? `${data.scope}/${data.name}`: data.name ;
 *      }
 *    }
 *  }
 *  return api(myPrompts, setup);
 * };
 * ```
 */
function generatorAPI() {
  var prompts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var setup = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var defaultConfig = {
    template: {
      src: './template/**',
      settings: {
        evaluate: /<%([\s\S]+?)%>/g,
        interpolate: /{{=([\s\S]+?)}}/g,
        escape: /{{-([\s\S]+?)}}/g
      },
      rename: {
        replace: function replace(data, match) {
          return data[match];
        }
      }
    },
    hooks: {
      preTransform: _lodash.noop,
      postTransform: _lodash.noop
    }
  };

  // default
  var defaultsPrompt = [generatorAPI.preset.name];
  var mergeQuestions = R.unionWith(R.eqProps('name'));
  var config = (0, _lodash.defaultsDeep)({}, setup, defaultConfig);
  var prompt = mergeQuestions(defaultsPrompt, prompts);

  return {
    config: config,
    prompt: prompt
  };
}
generatorAPI.validate = _validate;
generatorAPI.preset = preset;
generatorAPI.filter = _filter;

exports.default = generatorAPI;
exports.filter = _filter;
exports.validate = _validate;
exports.preset = preset;
//# sourceMappingURL=generator-api.js.map