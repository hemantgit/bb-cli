{"version":3,"sources":["../../src/lib/prompter.js"],"names":["promptQuestions","api","prompt","then","data","res","input","resolve","dirName","config","template","src","settings","rename","preTransform","hooks","postTransform","catch","type","message","err","trim","checkDestination","templateObj","outputDir","replace","output","name","verbose","Promise","colors","info","default","prompter"],"mappings":";;;;;;;AAAA;;;;AACA;;AACA;;;;AAEA,IAAMA,kBAAkB,SAAlBA,eAAkB,CAACC,GAAD;AAAA,SACtB,SAAGC,MAAH,CAAUD,IAAIC,MAAd,EACGC,IADH,CACQ;AAAA,WAAQ;AACZC,YAAMC,GADM;AAEZC,aAAO,eAAKC,OAAL,CAAaN,IAAIO,OAAjB,EAA0BP,IAAIQ,MAAJ,CAAWC,QAAX,CAAoBC,GAA9C,CAFK;AAGZC,gBAAUX,IAAIQ,MAAJ,CAAWC,QAAX,CAAoBE,QAHlB;AAIZC,cAAQZ,IAAIQ,MAAJ,CAAWC,QAAX,CAAoBG,MAJhB;AAKZC,oBAAcb,IAAIQ,MAAJ,CAAWM,KAAX,CAAiBD,YALnB;AAMZE,qBAAef,IAAIQ,MAAJ,CAAWM,KAAX,CAAiBC;AANpB,KAAR;AAAA,GADR,EASGC,KATH,CASS,eAAO;AACZ,UAAM,iBAAM;AACVC,YAAM,UADI;AAEVC,eAASC,IAAID,OAAJ,CAAYE,IAAZ;AAFC,KAAN,CAAN;AAID,GAdH,CADsB;AAAA,CAAxB;;AAiBA;AACA,IAAMC,mBAAmB,SAAnBA,gBAAmB,CAACC,WAAD,EAAcC,SAAd,EAAyBC,OAAzB,EAAqC;AAC5D;AACA;AACA;AACAF,cAAYG,MAAZ,GAAqB,eAAKnB,OAAL,CAAaiB,SAAb,EAAwBD,YAAYnB,IAAZ,CAAiBuB,IAAzC,CAArB;AACA,MAAIF,OAAJ,EAAa;AACX,cAAIG,OAAJ,CAAY,QAAZ,kBAAoCL,YAAYG,MAAhD;AACA,WAAOG,QAAQtB,OAAR,CAAgBgB,WAAhB,CAAP;AACD;AACD,MAAI,CAAC,kBAAMA,YAAYG,MAAlB,CAAD,IAA8B,CAAC,mBAAOH,YAAYG,MAAnB,CAAnC,EAA+D;AAC7D;AACA,WAAOG,QAAQtB,OAAR,CAAgBgB,WAAhB,CAAP;AACD;;AAED,SAAO,SAAGrB,MAAH,CAAU;AACfyB,UAAM,SADS;AAEfT,UAAM,SAFS;AAGfC,aAAS,iBAAe,SAAGW,MAAH,CAAUC,IAAV,CAAeR,YAAYG,MAA3B,CAAf,mBACA,uCAJM;AAKfM,aAAS;AALM,GAAV,EAMJ7B,IANI,CAMC,eAAO;AACb,QAAI,CAACE,IAAIoB,OAAT,EAAkB;AAChB,YAAM,iBAAM;AACVP,cAAM,UADI;AAEVC,0DAAgDI,YAAYG;AAFlD,OAAN,CAAN;AAID;AACD,WAAOH,WAAP;AACD,GAdM,CAAP;AAeD,CA7BD;;AA+BA,IAAMU,WAAW,SAAXA,QAAW,CAAChC,GAAD,EAAMuB,SAAN,EAAiBC,OAAjB;AAAA,SACfzB,gBAAgBC,GAAhB,EACGE,IADH,CACQ;AAAA,WAAemB,iBAAiBC,WAAjB,EAA8BC,SAA9B,EAAyCC,OAAzC,CAAf;AAAA,GADR,CADe;AAAA,CAAjB;;kBAIeQ,Q;QAEbjC,e,GAAAA,e;QACAsB,gB,GAAAA,gB","file":"prompter.js","sourcesContent":["import path from 'path';\nimport { ui, error, log } from '@bb-cli/base';\nimport { isDir, isFile } from './utils';\n\nconst promptQuestions = (api) =>\n  ui.prompt(api.prompt)\n    .then(res => ({\n      data: res,\n      input: path.resolve(api.dirName, api.config.template.src),\n      settings: api.config.template.settings,\n      rename: api.config.template.rename,\n      preTransform: api.config.hooks.preTransform,\n      postTransform: api.config.hooks.postTransform,\n    }))\n    .catch(err => {\n      throw error({\n        type: 'E_PROMPT',\n        message: err.message.trim(),\n      });\n    });\n\n// check if the output path exists\nconst checkDestination = (templateObj, outputDir, replace) => {\n  // output to outputDir/<prompted name>\n  // mutate to add the destination folder\n  // eslint-disable-next-line no-param-reassign\n  templateObj.output = path.resolve(outputDir, templateObj.data.name);\n  if (replace) {\n    log.verbose('PROMPT', `Overriding ${templateObj.output}`);\n    return Promise.resolve(templateObj);\n  }\n  if (!isDir(templateObj.output) && !isFile(templateObj.output)) {\n    // Not overriding, go ahead.\n    return Promise.resolve(templateObj);\n  }\n\n  return ui.prompt({\n    name: 'replace',\n    type: 'confirm',\n    message: `Destination ${ui.colors.info(templateObj.output)} exists. \\n` +\n             'Are you sure you want to override it?',\n    default: false,\n  }).then(res => {\n    if (!res.replace) {\n      throw error({\n        type: 'E_EXISTS',\n        message: `Refusing to override existing path: ${templateObj.output}`,\n      });\n    }\n    return templateObj;\n  });\n};\n\nconst prompter = (api, outputDir, replace) =>\n  promptQuestions(api)\n    .then(templateObj => checkDestination(templateObj, outputDir, replace));\n\nexport default prompter;\nexport {\n  promptQuestions,\n  checkDestination,\n};\n"]}