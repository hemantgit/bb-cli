'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.checkDestination = exports.promptQuestions = undefined;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _base = require('@bb-cli/base');

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var promptQuestions = function promptQuestions(api) {
  return _base.ui.prompt(api.prompt).then(function (res) {
    return {
      data: res,
      input: _path2.default.resolve(api.dirName, api.config.template.src),
      settings: api.config.template.settings,
      rename: api.config.template.rename,
      preTransform: api.config.hooks.preTransform,
      postTransform: api.config.hooks.postTransform
    };
  }).catch(function (err) {
    throw (0, _base.error)({
      type: 'E_PROMPT',
      message: err.message.trim()
    });
  });
};

// check if the output path exists
var checkDestination = function checkDestination(templateObj, outputDir, replace) {
  // output to outputDir/<prompted name>
  // mutate to add the destination folder
  // eslint-disable-next-line no-param-reassign
  templateObj.output = _path2.default.resolve(outputDir, templateObj.data.name);
  if (replace) {
    _base.log.verbose('PROMPT', 'Overriding ' + templateObj.output);
    return Promise.resolve(templateObj);
  }
  if (!(0, _utils.isDir)(templateObj.output) && !(0, _utils.isFile)(templateObj.output)) {
    // Not overriding, go ahead.
    return Promise.resolve(templateObj);
  }

  return _base.ui.prompt({
    name: 'replace',
    type: 'confirm',
    message: 'Destination ' + _base.ui.colors.info(templateObj.output) + ' exists. \n' + 'Are you sure you want to override it?',
    default: false
  }).then(function (res) {
    if (!res.replace) {
      throw (0, _base.error)({
        type: 'E_EXISTS',
        message: 'Refusing to override existing path: ' + templateObj.output
      });
    }
    return templateObj;
  });
};

var prompter = function prompter(api, outputDir, replace) {
  return promptQuestions(api).then(function (templateObj) {
    return checkDestination(templateObj, outputDir, replace);
  });
};

exports.default = prompter;
exports.promptQuestions = promptQuestions;
exports.checkDestination = checkDestination;
//# sourceMappingURL=prompter.js.map