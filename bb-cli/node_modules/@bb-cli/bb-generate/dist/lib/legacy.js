'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.convertLegacyGenerator = exports.isLegacyGenerator = undefined;

var _ramda = require('ramda');

var _base = require('@bb-cli/base');

var _generatorApi = require('./generator-api');

var isFunction = function isFunction(a) {
  return typeof a === 'function';
};

var isLegacyGenerator = function isLegacyGenerator(generator) {
  return !isFunction(generator);
};

// Extract part of the name without prefixes and suffixes.
var prefixSuffixRegex = /^(?:ui-bb|widget-bb|model-bb|widget)-(.*?)-?(?:ng|ext)?$/;
var getBaseName = function getBaseName(name) {
  return name.replace(prefixSuffixRegex, '$1');
};

var templateTransforms = function templateTransforms(data) {
  var transforms = (0, _ramda.map)(function (value) {
    return {
      camelCase: _generatorApi.filter.camelCase(value),
      capitalize: _generatorApi.filter.capitalize(value)
    };
  }, data);

  if (data.name && transforms.name) {
    var baseName = getBaseName(data.name);
    transforms.name = (0, _ramda.merge)(transforms.name, {
      suffixless: data.name.replace(/-ng(?:-ext)?$/, ''),
      base: baseName,
      baseCamelCase: _generatorApi.filter.camelCase(baseName),
      baseCapitalize: _generatorApi.filter.capitalize(baseName)
    });
  }

  return transforms;
};

var dataTransform = function dataTransform(data) {
  // mutate data
  data.transforms = templateTransforms(data); // eslint-disable-line no-param-reassign

  // Assign to namespaces.
  var namespaces = ['widget', 'container', 'module', 'component'];
  namespaces.forEach(function (ns) {
    data[ns] = data || {}; // eslint-disable-line no-param-reassign
  });

  return data;
};

var preTransformHook = function preTransformHook(data) {
  _base.log.warn('LEGACY', 'Using a legacy version of this generator. Upgrade it to the latest.');
  return dataTransform(data);
};

var legacyConfig = {
  hooks: {
    preTransform: preTransformHook
  },
  template: {
    settings: null,
    rename: {
      match: /__(.+?)__/g,
      replace: function replace(data, match) {
        return data.transforms.name[match] || data[match];
      }
    }
  }
};

var defaultQuestions = function defaultQuestions(generator) {
  if (generator.defaultQuestions && isFunction(generator.defaultQuestions)) {
    return generator.defaultQuestions();
  }

  // todo: use presets
  return [{
    type: 'input',
    name: 'name',
    message: 'Name',
    validate: function validate(value) {
      return _generatorApi.validate.isRequired(value, 'Name is required');
    },
    filter: (0, _ramda.pipe)(_generatorApi.filter.deburr, _generatorApi.filter.kebabCase)
  }, {
    type: 'input',
    name: 'title',
    message: 'Title',
    validate: function validate(value) {
      return _generatorApi.validate.isRequired(value, 'Title is required');
    },
    filter: _ramda.trim
  }, {
    type: 'input',
    name: 'description',
    message: 'Description',
    validate: function validate(value) {
      return _generatorApi.validate.isRequired(value, 'Description is required');
    },
    filter: _ramda.trim
  }, {
    name: 'tags',
    message: 'Tags',
    filter: function filter(str) {
      return str.split(/\s*,\s*/);
    }
  }];
};

var mergeQuestions = (0, _ramda.unionWith)((0, _ramda.eqProps)('name'));

var generatorQuestions = function generatorQuestions(generator) {
  var questions = defaultQuestions(generator);
  var hasAdditionalQuestions = generator.additionalQuestions && isFunction(generator.additionalQuestions);

  if (hasAdditionalQuestions) {
    questions = mergeQuestions(questions, generator.additionalQuestions());
  }

  return questions;
};

var convertLegacyGenerator = function convertLegacyGenerator(legacyGenerator) {
  return function (generatorFactory) {
    // Prompts
    var questions = generatorQuestions(legacyGenerator);
    return generatorFactory(questions, legacyConfig);
  };
};

exports.isLegacyGenerator = isLegacyGenerator;
exports.convertLegacyGenerator = convertLegacyGenerator;
//# sourceMappingURL=legacy.js.map