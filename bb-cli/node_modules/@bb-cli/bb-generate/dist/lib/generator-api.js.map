{"version":3,"sources":["../../src/lib/generator-api.js"],"names":["R","validate","isSemver","val","msg","valid","isRequired","not","filter","camelCase","lowerCase","kebabCase","startCase","capitalize","escape","unescape","template","trim","truncate","replace","upperFirst","lowerFirst","deburr","prefix","pre","preset","name","message","pipe","value","description","version","default","generatorAPI","prompts","setup","defaultConfig","src","settings","evaluate","interpolate","rename","data","match","hooks","preTransform","postTransform","defaultsPrompt","mergeQuestions","unionWith","eqProps","config","prompt"],"mappings":";;;;;;;AAAA;;AACA;;IAAYA,C;;AACZ;;;;AAwBA;;;;;;AAMA,IAAMC,YAAW,EAAjB;;AAEA;;;;;;;;;;;;;;;;;;;;AAoBAA,UAASC,QAAT,GAAoB,UAACC,GAAD,EAAMC,GAAN;AAAA,SAAe,aAAOC,KAAP,CAAaF,GAAb,IAAoB,IAApB,GAA2BC,GAA1C;AAAA,CAApB;;AAEA;;;;;;;;;;;;;;;;;;AAkBAH,UAASK,UAAT,GAAsB,UAACH,GAAD,EAAMC,GAAN;AAAA,SAAeJ,EAAEO,GAAF,CAAM,qBAAQJ,GAAR,CAAN,IAAsB,IAAtB,GAA6BC,GAA5C;AAAA,CAAtB;;AAEA;;;;;;AAMA,IAAMI,UAAS,EAAf;;AAEA;;;;;;;AAOAA,QAAOC,SAAP;AACA;;;;;;AAMAD,QAAOE,SAAP;AACA;;;;;;AAMAF,QAAOG,SAAP;AACA;;;;;;AAMAH,QAAOI,SAAP;AACA;;;;;;AAMAJ,QAAOK,UAAP;AACA;;;;;;AAMAL,QAAOM,MAAP;AACA;;;;;;AAMAN,QAAOO,QAAP;AACA;;;;;;AAMAP,QAAOQ,QAAP;AACA;;;;;;AAMAR,QAAOS,IAAP;AACA;;;;;;AAMAT,QAAOU,QAAP;AACA;;;;;;AAMAV,QAAOW,OAAP;AACA;;;;;;AAMAX,QAAOY,UAAP;AACA;;;;;;AAMAZ,QAAOa,UAAP;AACA;;;;;;AAMAb,QAAOc,MAAP;AACA;;;;;;;;;;;;;;;;;AAiBAd,QAAOe,MAAP,GAAgB,UAACpB,GAAD;AAAA,MAAMqB,GAAN,uEAAY,EAAZ;AAAA,SAAoB,CAAE,wBAAWrB,GAAX,EAAgBqB,GAAhB,CAAF,QAA4BA,GAA5B,GAAkCrB,GAAlC,GAA0CA,GAA9D;AAAA,CAAhB;;AAEA;;;;;AAKA;;;;;;AAMA,IAAMsB,SAAS,EAAf;;AAEA;;;;;;;;;;;;;;;AAeAA,OAAOC,IAAP,GAAc;AACZA,QAAM,MADM;AAEZC,WAAS,MAFG;AAGZnB,UAAQ;AAAA,WAASR,EAAE4B,IAAF,oCAA0BC,KAA1B,CAAT;AAAA,GAHI;AAIZ5B,YAAU;AAAA,WAASA,UAASK,UAAT,CAAoBuB,KAApB,EAA2B,yBAA3B,CAAT;AAAA;AAJE,CAAd;;AAOA;;;;;;;;;;;;;;;AAeAJ,OAAOK,WAAP,GAAqB;AACnBJ,QAAM,aADa;AAEnBC,WAAS,aAFU;AAGnBnB,UAAQ;AAAA,WAASA,QAAOK,UAAP,CAAkBgB,KAAlB,CAAT;AAAA,GAHW;AAInB5B,YAAU;AAAA,WAASA,UAASK,UAAT,CAAoBuB,KAApB,EAA2B,gCAA3B,CAAT;AAAA;AAJS,CAArB;;AAOA;;;;;;;;;;;;;;;;AAgBAJ,OAAOM,OAAP,GAAiB;AACfL,QAAM,SADS;AAEfC,WAAS,SAFM;AAGfK,WAAS,eAHM;AAIfxB,UAAQ;AAAA,WAASqB,KAAT;AAAA,GAJO;AAKf5B,YAAU;AAAA,WAASA,UAASC,QAAT,CAAkB2B,KAAlB,EAAyB,mDAAzB,CAAT;AAAA;AALK,CAAjB;;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8EA,SAASI,YAAT,GAAgD;AAAA,MAA1BC,OAA0B,uEAAhB,EAAgB;AAAA,MAAZC,KAAY,uEAAJ,EAAI;;AAC9C,MAAMC,gBAAgB;AACpBpB,cAAU;AACRqB,WAAK,eADG;AAERC,gBAAU;AACRC,kBAAU,iBADF;AAERC,qBAAa,kBAFL;AAGR1B,gBAAQ;AAHA,OAFF;AAOR2B,cAAQ;AACNtB,iBAAS,iBAACuB,IAAD,EAAOC,KAAP;AAAA,iBAAiBD,KAAKC,KAAL,CAAjB;AAAA;AADH;AAPA,KADU;AAYpBC,WAAO;AACLC,gCADK;AAELC;AAFK;AAZa,GAAtB;;AAkBA;AACA,MAAMC,iBAAiB,CACrBd,aAAaR,MAAb,CAAoBC,IADC,CAAvB;AAGA,MAAMsB,iBAAiBhD,EAAEiD,SAAF,CAAYjD,EAAEkD,OAAF,CAAU,MAAV,CAAZ,CAAvB;AACA,MAAMC,SAAS,0BAAa,EAAb,EAAiBhB,KAAjB,EAAwBC,aAAxB,CAAf;AACA,MAAMgB,SAASJ,eAAeD,cAAf,EAA+Bb,OAA/B,CAAf;;AAEA,SAAO;AACLiB,kBADK;AAELC;AAFK,GAAP;AAID;AACDnB,aAAahC,QAAb,GAAwBA,SAAxB;AACAgC,aAAaR,MAAb,GAAsBA,MAAtB;AACAQ,aAAazB,MAAb,GAAsBA,OAAtB;;kBAEeyB,Y;QAGbzB,M,GAAAA,O;QACAP,Q,GAAAA,S;QACAwB,M,GAAAA,M","file":"generator-api.js","sourcesContent":["import { semver } from '@bb-cli/base';\nimport * as R from 'ramda';\nimport {\n  // internals\n  noop,\n  defaultsDeep, // @todo use Ramda to create similar functionality\n  // validators\n  isEmpty,\n  // filters\n  camelCase,\n  deburr,\n  lowerCase,\n  kebabCase,\n  startCase,\n  capitalize,\n  template,\n  escape,\n  unescape,\n  trim,\n  truncate,\n  replace,\n  upperFirst,\n  lowerFirst,\n  startsWith,\n} from 'lodash';\n\n/**\n * Validation utilities for generatorAPI\n * @public\n * @name validate\n * @memberOf module:generatorAPI\n */\nconst validate = {};\n\n/**\n * Checks if the given version is a semver valid version\n * @see http://semver.org/\n * @public\n * @name isSemver\n * @memberOf module:generatorAPI.validate\n * @since v2.0.0\n * @type {Function}\n * @sig (String , String) -> Boolean\n * @param {String} version Version value\n * @param {String} message Message in case of not valid\n * @returns {Boolean}\n * @example\n * Basic usage:\n *\n * ```javascript\n * const isValidVersion = validate.isSemver('v1',\n *   'Version field needs to be a semver valid version!') => false\n * ```\n */\nvalidate.isSemver = (val, msg) => (semver.valid(val) ? true : msg);\n\n/**\n * Checks if the given value is empty\n * @public\n * @name isRequired\n * @memberOf module:generatorAPI.validate\n * @sig (String , String) -> Boolean\n * @since v2.0.0\n * @type {Function}\n * @param {String} Version testing value\n * @param {String} message Message in case required value\n * @returns {Boolean}\n * @example\n *\n * Basic usage:\n * ```javascript\n * const isMandatory = validate.isRequired('some-value', 'This field is mandatory');\n * ```\n */\nvalidate.isRequired = (val, msg) => (R.not(isEmpty(val)) ? true : msg);\n\n/**\n * Filter or transformers utilities for generatorAPI\n * @public\n * @name filter\n * @memberOf module:generatorAPI\n */\nconst filter = {};\n\n/**\n * Filter or transformers utilities for generatorAPI\n * @public\n * @name camelCase\n * @memberOf module:generatorAPI.filter\n * @see https://lodash.com/docs#camelCase\n */\nfilter.camelCase = camelCase;\n/**\n * @public\n * @name lowerCase\n * @memberOf module:generatorAPI.filter\n * @see https://lodash.com/docs#lowerCase\n */\nfilter.lowerCase = lowerCase;\n/**\n * @public\n * @name kebabCase\n * @memberOf module:generatorAPI.filter\n * @see https://lodash.com/docs#kebabCase\n */\nfilter.kebabCase = kebabCase;\n/**\n * @public\n * @name startCase\n * @memberOf module:generatorAPI.filter\n * @see https://lodash.com/docs#startCase\n */\nfilter.startCase = startCase;\n/**\n * @public\n * @name capitalize\n * @memberOf module:generatorAPI.filter\n * @see https://lodash.com/docs#capitalize\n */\nfilter.capitalize = capitalize;\n/**\n * @public\n * @name escape\n * @memberOf module:generatorAPI.filter\n * @see https://lodash.com/docs#escape\n */\nfilter.escape = escape;\n/**\n * @public\n * @name unescape\n * @memberOf module:generatorAPI.filter\n * @see https://lodash.com/docs#unescape\n */\nfilter.unescape = unescape;\n/**\n * @public\n * @name template\n * @memberOf module:generatorAPI.filter\n * @see https://lodash.com/docs#template\n */\nfilter.template = template;\n/**\n * @public\n * @name trim\n * @memberOf module:generatorAPI.filter\n * @see https://lodash.com/docs#trim\n */\nfilter.trim = trim;\n/**\n * @public\n * @name truncate\n * @memberOf module:generatorAPI.filter\n * @see https://lodash.com/docs#truncate\n */\nfilter.truncate = truncate;\n/**\n * @public\n * @name replace\n * @memberOf module:generatorAPI.filter\n * @see https://lodash.com/docs#replace\n */\nfilter.replace = replace;\n/**\n * @public\n * @name upperFirst\n * @memberOf module:generatorAPI.filter\n * @see https://lodash.com/docs#upperFirst\n */\nfilter.upperFirst = upperFirst;\n/**\n * @public\n * @name lowerFirst\n * @memberOf module:generatorAPI.filter\n * @see https://lodash.com/docs#lowerFirst\n */\nfilter.lowerFirst = lowerFirst;\n/**\n * @public\n * @name deburr\n * @memberOf module:generatorAPI.filter\n * @see https://lodash.com/docs#deburr\n */\nfilter.deburr = deburr;\n/**\n * Add a prefix to the given value\n * @public\n * @name prefix\n * @memberOf module:generatorAPI.filter\n * @type {Function}\n * @since v2.0.0\n * @sig (String , String) -> String\n * @param {String} Version testing value\n * @param {String} message Message in case required value\n * @returns {String} Prefixed value\n * @example\n *\n * ```javascript\n * const preValue = filter.prefix('widget', 'bb-') => 'bb-widget'\n * ```\n */\nfilter.prefix = (val, pre = '') => (! startsWith(val, pre) ? `${pre}${val}` : val);\n\n/**\n* ------------------------------------------------------------------------\n* Presets\n* ------------------------------------------------------------------------\n*/\n/**\n * Inquirer predefined prompts\n * @see https://github.com/SBoudrias/Inquirer.js#questions\n * @public\n * @module prompts\n */\nconst preset = {};\n\n/**\n * Name prompt a mandatory question, is returning a kebabCase value\n * @public\n * @name name\n * @default\n * @memberOf module:prompts\n * @type {Object}\n * @since v2.0.0\n * @example\n *\n * ```javascript\n * prompts.name -> 'some value' -> 'some-value'\n * ```\n */\n\npreset.name = {\n  name: 'name',\n  message: 'Name',\n  filter: value => R.pipe(deburr, kebabCase)(value),\n  validate: value => validate.isRequired(value, 'Name field is required!'),\n};\n\n/**\n * Description prompt\n * Required description value\n * @name description\n * @public\n * @memberOf module:prompts\n * @type {Object}\n * @since v2.0.0\n * @example\n *\n * ```javascript\n * prompts.description -> 'some value' -> 'Some value'\n * ```\n */\n\npreset.description = {\n  name: 'description',\n  message: 'Description',\n  filter: value => filter.capitalize(value),\n  validate: value => validate.isRequired(value, 'Description field is required!'),\n};\n\n/**\n * Version prompt,\n * A Required semver value\n * @name version\n * @see https://docs.npmjs.com/getting-started/semantic-versioning\n * @public\n * @default 0.1.0-alpha.0\n * @memberOf module:prompts\n * @type {Object}\n * @since v2.0.0\n * @example\n *\n * ```javascript\n * prompts.version -> '' -> '0.1.0-alpha.0'\n * ```\n */\npreset.version = {\n  name: 'version',\n  message: 'Version',\n  default: '0.1.0-alpha.0',\n  filter: value => value,\n  validate: value => validate.isSemver(value, 'Version field needs to be a semver valid version!'),\n};\n\n/**\n * Factory to create generator API prompts\n * Prompts are based on the Inquirer.js prompt api\n * @see https://github.com/SBoudrias/Inquirer.js#questions\n * @module generatorAPI\n * @name generatorAPI\n * @public\n * @since v2.0.0\n * @type {Function}\n * @param {generator} api Default generator\n * @param {prompts} prompts Default prompts\n * @param {inquirer} Inquirer.js https://github.com/SBoudrias/Inquirer.js#inquirerpromptquestions---promise\n * @return {Function} new prompt generator\n * @example\n *\n * Basic default Example\n *\n * ```javascript\n * module.exports = function(api, prompts, inquirer) {\n *   return api(prompts);\n * };\n * ```\n *\n * With my prompts:\n *\n * ```javascript\n * module.exports = function(api, prompts) {\n *   const myPrompts = [{\n *     type: 'password',\n *     name: 'password',\n *     message: 'What is your password',\n *     default: 'admin'\n *   }]\n *  return api(myPrompts);\n * };\n * ```\n *\n * Extend default prompts:\n *\n * ```javascript\n * module.exports = function(api, prompts) {\n *   const myPrompts = [\n *     Object.assign(prompts.name, {\n *       message: 'What is your username',\n *     }),\n *    {\n *     type: 'password',\n *     name: 'password',\n *     message: 'What is your password',\n *     default: answers => `bb-${answer.name}`, // use previous answers\n *   }]\n *  return api(myPrompts);\n * };\n * ```\n *\n * Advanced example:\n *\n * ```javascript\n * module.exports = function(api, prompts) {\n *  const myPrompts = [{\n *    name: 'scope',\n *    message: 'Scope',\n *    default: '@backbase',\n *    filter: value => api.filter.prefix(value, 'bb-'),\n *    validate: value => api.validate.isRequired(value, 'Scope field is required!'),\n *  }];\n *\n *  const setup = {\n *    hooks: {\n *      preTransform: function(data) {\n *        data.name = data.scope ? `${data.scope}/${data.name}`: data.name ;\n *      }\n *    }\n *  }\n *  return api(myPrompts, setup);\n * };\n * ```\n */\nfunction generatorAPI(prompts = [], setup = {}) {\n  const defaultConfig = {\n    template: {\n      src: './template/**',\n      settings: {\n        evaluate: /<%([\\s\\S]+?)%>/g,\n        interpolate: /{{=([\\s\\S]+?)}}/g,\n        escape: /{{-([\\s\\S]+?)}}/g,\n      },\n      rename: {\n        replace: (data, match) => data[match],\n      },\n    },\n    hooks: {\n      preTransform: noop,\n      postTransform: noop,\n    },\n  };\n\n  // default\n  const defaultsPrompt = [\n    generatorAPI.preset.name,\n  ];\n  const mergeQuestions = R.unionWith(R.eqProps('name'));\n  const config = defaultsDeep({}, setup, defaultConfig);\n  const prompt = mergeQuestions(defaultsPrompt, prompts);\n\n  return {\n    config,\n    prompt,\n  };\n}\ngeneratorAPI.validate = validate;\ngeneratorAPI.preset = preset;\ngeneratorAPI.filter = filter;\n\nexport default generatorAPI;\n\nexport {\n  filter,\n  validate,\n  preset,\n};\n"]}