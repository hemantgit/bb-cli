'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.generate = exports.promptAndGenerate = undefined;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _ramda = require('ramda');

var _ramda2 = _interopRequireDefault(_ramda);

var _gulp = require('gulp');

var _gulp2 = _interopRequireDefault(_gulp);

var _gulpTemplate = require('gulp-template');

var _gulpTemplate2 = _interopRequireDefault(_gulpTemplate);

var _gulpRename = require('gulp-rename');

var _gulpRename2 = _interopRequireDefault(_gulpRename);

var _base = require('@bb-cli/base');

var _resolver = require('./resolver');

var _resolver2 = _interopRequireDefault(_resolver);

var _prompter = require('./prompter');

var _prompter2 = _interopRequireDefault(_prompter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var runPreHook = function runPreHook(templateObj) {
  _base.log.verbose('PRE_HOOK', 'run pre-transform hook');
  var preHook = templateObj.preTransform;
  if (typeof preHook === 'function') {
    preHook.call(null, templateObj.data);
  }
  return templateObj;
};

/**
 * @todo 1.prevent creating output folder on template error
 * @private
 */
var transform = function transform(templateObj) {
  var output = {
    path: templateObj.output,
    files: []
  };
  var templateDir = _path2.default.dirname(templateObj.input);

  var srcImages = function srcImages() {
    var extensions = ['png', 'jpg', 'jpeg', 'webp', 'gif', 'tiff', 'bmp'];
    return extensions.map(function (ext) {
      return '' + _path2.default.join(templateDir, '**', '*.' + ext);
    });
  };
  var srcInput = function srcInput() {
    var excludeDirs = ['bower_components', 'node_modules', '.git', '.svn'];
    var globs = excludeDirs.map(function (dir) {
      return '!' + _path2.default.join(templateDir, dir);
    }).concat(srcImages().map(function (img) {
      return '!' + img;
    })).concat(templateObj.input);
    _base.log.verbose('TRANSFORM', globs);
    return globs;
  };

  _base.log.verbose('DATA', templateObj);
  return new Promise(function (resolve, reject) {
    // copy images first
    // gulp-template is screwing up with images when they are buffered back
    // https://github.com/sindresorhus/gulp-template/blob/master/index.js#L21
    _gulp2.default.src(srcImages()).pipe(_gulp2.default.dest(_path2.default.resolve(templateObj.output)));
    // transform template
    _gulp2.default.src(srcInput(), { follow: false }).pipe((0, _gulpTemplate2.default)(templateObj.data, templateObj.settings))
    // @see todo 1
    .on('error', function (err) {
      var transformError = (0, _base.error)({
        type: 'E_TRANSFORM',
        message: err.message.trim()
      });
      reject(transformError);
    }).pipe((0, _gulpRename2.default)(function (filePath) {
      var pattern = templateObj.rename.match || templateObj.settings.interpolate;
      var renameRegex = new RegExp(pattern);
      var renameFn = function renameFn(match1, match2) {
        return templateObj.rename.replace(templateObj.data, match2);
      };
      var newName = filePath.basename.replace(renameRegex, renameFn);
      if (newName && newName !== filePath.basename) {
        _base.log.verbose('RENAME', 'Renaming ' + filePath.basename + ' to ' + newName);
        // mutate param required to rename.
        filePath.basename = newName; // eslint-disable-line no-param-reassign
      }
      output.files.push(filePath);
      return filePath;
    })).pipe(_gulp2.default.dest(templateObj.output)).on('error', reject).on('end', function () {
      return resolve(output);
    });
  });
};

/**
 * Run a postTransform hook on
 * @todo 1. create resolve filepaths correctly (use nodejs `path.sep` fn)
 * @private
 */
var runPostHook = function runPostHook(output) {
  var exclude = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

  _base.log.verbose('POST_HOOK', 'run post-transform hook ' + output);
  var excludedItems = _ramda2.default.map(_ramda2.default.trim, _ramda2.default.filter(function (i) {
    return _ramda2.default.is(String, i) && !_ramda2.default.isEmpty(i) && !_ramda2.default.isNil(i);
  }, exclude));
  _ramda2.default.forEach(function (pattern) {
    var fullPathPattern = _path2.default.resolve(output.path, pattern);
    if (pattern.startsWith('/') || pattern.startsWith('../')) {
      _base.log.verbose('EXCLUDE', 'refusing to delete ' + pattern);
    } else {
      var result = _base.sh.rm('-rf', fullPathPattern);
      if (result.code !== 0) {
        throw (0, _base.error)({
          type: 'E_EXEC',
          code: result.code,
          message: result.stderr.trim()
        });
      }
      _base.log.verbose('EXLCUDE', fullPathPattern);
    }
    return fullPathPattern;
  }, excludedItems);

  var postHook = output.postTransform;
  if (typeof postHook === 'function') {
    postHook.call(null, output);
  }
  return output;
};

var generate = function generate(templateObj, exclude) {
  return transform(runPreHook(templateObj)).then(function (output) {
    return runPostHook(output, exclude);
  });
};

var promptAndGenerate = function promptAndGenerate(name, template, options) {
  return (0, _resolver2.default)(name, template, options.scope).then(function (api) {
    return (0, _prompter2.default)(api, options.output, options.yes);
  }).then(function (templateObj) {
    return generate(templateObj, options.exclude);
  });
};

/**
 * API usage for bb-generate CLI
 *
 * @module @bb-cli/bb-generate.generate
 * @type {Object}
 * @public
 * @since v2.0.0
 * @returns {Promise.<GeneratedItems>} items that were transformed
 * @example
 * Basic generate item example
 *
 * ```javascript
 * import bbGenerate from '@bb-cli/bb-generate';
 * const options {
 *  scope: '@backbase',
 * };
 *
 * bbGenerate(generatorName, template, options)
 *   .then(handleOutputFiles, handleErrors);
 * ```
 */

exports.default = promptAndGenerate;
exports.promptAndGenerate = promptAndGenerate;
exports.generate = generate;
//# sourceMappingURL=generator.js.map