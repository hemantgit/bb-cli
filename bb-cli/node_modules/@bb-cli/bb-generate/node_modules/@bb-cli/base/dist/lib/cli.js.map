{"version":3,"sources":["../../src/lib/cli.js"],"names":["Command","humanReadableArgName","arg","isVariadic","variadic","tplOutput","name","required","pad","str","width","len","Math","max","length","Array","join","prototype","version","flags","arguments","_version","option","on","process","stdout","write","exit","helpInformation","headingOptions","colors","heading","headingDescription","headingUsage","desc","_description","cmdHelp","commandHelp","optHelp","optionHelp","manHelp","_man","cmds","opts","replace","cmdName","_name","_alias","usage","options","concat","commands","headingTitle","filter","cmd","_noHelp","map","args","_args","alias","tplCmd","reduce","command","addPadding","man","filePath","manContent","md2term","readFileSync","toString","verbose","err","error"],"mappings":"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","file":"cli.js","sourcesContent":["/**\n * ------------------------------------------------------------------------\n * CLI module\n * ------------------------------------------------------------------------\n */\n\nimport fs from 'fs';\nimport cli from 'commander'; // import the command instance\nimport log from './log';\nimport utils from './utils';\nimport ui from './ui';\n\nconst Command = cli.Command;\n/**\n * copied from the Commander\n * @private\n */\nfunction humanReadableArgName(arg) {\n  const isVariadic = arg.variadic === true ? '...' : '';\n  const tplOutput = `${arg.name}${isVariadic}`;\n  return arg.required ? `<${tplOutput}>` : `[${tplOutput}]`;\n}\n/**\n * copied from the Commander\n * @private\n */\nfunction pad(str, width) {\n  const len = Math.max(0, width - str.length);\n  return str + Array(len + 1).join(' ');\n}\n\n/**\n * Set the program version to `str`.\n *\n * This method auto-registers the \"-v, --version\" flag\n * which will print the version number when passed.\n *\n * @param {String} str\n * @param {String} flags\n * @return {Command} for chaining\n * @override\n */\n\nCommand.prototype.version = function version(str, flags = '-v, --version') {\n  if (arguments.length === 0) return this._version;\n  this._version = str;\n  this.option(flags, 'output the version number');\n  this.on('version', () => {\n    process.stdout.write(`${str}\\n`);\n    process.exit(0);\n  });\n  return this;\n};\n/**\n * eslint no-underscore-dangle: \"off\"\n * @override\n * @returns {string} Help information string\n */\n\n// Ignore commander's private prop. notation using '_'\n/* eslint no-underscore-dangle: \"off\" */\n\nCommand.prototype.helpInformation = function helpInformation() {\n  const headingOptions = ui.colors.heading('OPTIONS: ');\n  const headingDescription = ui.colors.heading('NAME: ');\n  const headingUsage = ui.colors.heading('SYNOPSIS: ');\n  const desc = this._description\n              ? [headingDescription, `${this.name()} - ${this._description}`, '']\n              : [];\n\n  const cmdHelp = this.commandHelp();\n  const optHelp = this.optionHelp();\n  const manHelp = this._man;\n  const cmds = cmdHelp || [];\n  const opts = optHelp ? optHelp.replace(/^/gm, '  ') : [];\n  let cmdName = this._name;\n  if (this._alias) {\n    cmdName = `${cmdName} | ${this._alias}`;\n  }\n  const usage = [headingUsage, `${cmdName} ${this.usage()}`, ''];\n  const options = [headingOptions, opts];\n  return desc\n    .concat(usage)\n    .concat(cmds)\n    .concat(options)\n    .concat(manHelp)\n    .join('\\n');\n};\n/**\n * @override\n * @public\n * @returns {string} Help information string\n */\n\nCommand.prototype.commandHelp = function commandHelp() {\n  if (!this.commands.length) return '';\n  const headingTitle = ui.colors.heading('COMMANDS:');\n  const commands = this.commands.filter(cmd => !cmd._noHelp)\n    .map(cmd => {\n      const args = cmd._args.map(arg => humanReadableArgName(arg)).join(' ');\n      const alias = cmd._alias ? '| ${cmd._alias}' : '';\n      const options = cmd.options.length ? '[options]' : '';\n      const tplCmd = `${cmd._name} ${alias} ${args} ${options} ${cmd._description}`;\n      return [tplCmd];\n    });\n  const width = commands.reduce((max, command) => Math.max(max, command[0].length), 0);\n  const addPadding = cmd => pad(cmd[0], width) + (cmd[1] ? cmd[1] : '');\n\n  return [headingTitle, commands.map(addPadding).join('\\n').replace(/^/gm, '  '), ''];\n};\n\n/**\n * Load and convert the markdown file for help output\n *\n * @public\n * @param  {string} filePath Read from this file path\n * @returns {cli}          Command instance\n */\n\nCommand.prototype.man = function man(filePath) {\n  let manContent = '';\n  try {\n    manContent = utils.md2term(fs.readFileSync(filePath, 'utf8').toString());\n    log.verbose('MAN', `${filePath}`);\n  } catch (err) {\n    log.error(err);\n  }\n  this._man = `\\n${manContent}`;\n  return this;\n};\n\n/**\n * CLI parser based on [commander](https://github.com/tj/commander.js/)\n * with some additions and overrides.\n *\n * @module cli\n * @link https://github.com/tj/commander.js/\n * @type {object}\n * @example\n * Create a main command with 3 sub-commands:\n *\n * ``` javascript\n * import { cli } from '@bb-cli/base';\n *\n * cli.version('0.0.1')\n *   .command('install [...packages]', 'install one or more packages')\n *   .command('search [query]', 'search with optional query')\n *   .command('list', 'list packages installed', {isDefault: true})\n *   .parse(process.argv);\n *```\n *\n * Create the `install` sub-command:\n *\n * ``` javascript\n * import { cli } from '@bb-cli/base';\n *\n * cli\n *   .description('Install package from registry')\n *   .arguments('[...packages]', 'install one or more packages')\n *   .option('-f, --force [force]', 'force installation ', false)\n *   .option('-r, --registry [registry]', 'registry host ')\n *   .alias('i')\n *   .man( path.resolve(__dirname, '../../man/install.md'))\n *   .parse(process.argv);\n *\n * let packages = cli.args; // get the packages as variadic arguments\n * let force = cli.force  // get the force option\n *```\n */\n\nexport default cli;\n"]}