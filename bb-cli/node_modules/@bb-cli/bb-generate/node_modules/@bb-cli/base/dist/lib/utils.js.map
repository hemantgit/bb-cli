{"version":3,"sources":["../../src/lib/utils.js"],"names":["md2html","mdStr","md","render","md2term","options","styleOptions","heading","bold","firstHeading","underline","code","green","use","mdTerminalFenceOrgFn","renderer","rules","fence","mdTerminalHeadingOpenFn","heading_open","args","apply"],"mappings":"sEAKA,uC,qDACA,wD,qEACA,8BACA,uC,wIAGA;;;;;;;;;;;GAXA;;;;GAuBA,QAASA,QAAT,CAAiBC,KAAjB,CAAwB,CACtB,GAAMC,IAAK,0BAAX,CACA,MAAO,iBAAKA,GAAGC,MAAH,CAAUF,KAAV,CAAL,CAAP,CACD,CACD;;;;;;;;;;;GAYA,QAASG,QAAT,CAAiBH,KAAjB,CAAwB,CACtB,GAAMC,IAAK,0BAAX,CAEA,GAAMG,SAAU,CAEdC,aAAc,CACZC,QAAS,qBAAOC,IADJ,CAEZC,aAAc,qBAAOC,SAFT,CAGZC,KAAM,qBAAOC,KAHD,CAFA,CAAhB,CAQAV,GAAGW,GAAH,8BAAiBR,OAAjB,EACA;AACA,GAAMS,sBAAuBZ,GAAGa,QAAH,CAAYC,KAAZ,CAAkBC,KAA/C,CACA,GAAMC,yBAA0BhB,GAAGa,QAAH,CAAYC,KAAZ,CAAkBG,YAAlD,CACAjB,GAAGa,QAAH,CAAYC,KAAZ,CAAkBC,KAAlB,CAA0B,yCAAIG,IAAJ,sCAAIA,IAAJ,8BAAa,sBAAUN,qBAAqBO,KAArB,CAA2B,IAA3B,CAAiCD,IAAjC,CAAV,CAAb,EAA1B,CACAlB,GAAGa,QAAH,CAAYC,KAAZ,CAAkBG,YAAlB,CAAiC,0CAAIC,IAAJ,2CAAIA,IAAJ,gCAAa,iBAAKF,wBAAwBG,KAAxB,CAA8B,IAA9B,CAAoCD,IAApC,CAAL,CAAb,EAAjC,CACA,MAAOlB,IAAGC,MAAH,CAAUF,KAAV,CAAP,CACD,CAED;;;;mBAMe,CACbD,eADa,CAEbI,eAFa,C","file":"utils.js","sourcesContent":["/**\n * ------------------------------------------------------------------------\n * Utilities module\n * ------------------------------------------------------------------------\n */\nimport MarkdownIt from 'markdown-it';\nimport terminal from 'markdown-it-terminal';\nimport { trimStart, trim } from 'lodash';\nimport styles from 'ansi-styles';\n\n\n/**\n * Converts markdown to html output\n * @param  {string} mdStr Markdown content string\n * @returns {string}       html string\n * @memberof module:utils\n * @example\n * Basic Example\n *\n * ```javascript\n * const htmlStr = utils.md2html(fs.readFileSync('some-markdown-file.md', 'utf8').toString());\n * ```\n */\nfunction md2html(mdStr) {\n  const md = new MarkdownIt();\n  return trim(md.render(mdStr));\n}\n/**\n * @todo  Make it work with colors instead of ansi-styles\n * @param  {string} mdStr markdown content string\n * @memberof module:utils\n * @returns {string}\n * @example\n * Basic Example\n *\n * ```javascript\n * const termMdOut = utils.md2term(fs.readFileSync('some-markdown-file.md', 'utf8').toString());\n * ```\n */\nfunction md2term(mdStr) {\n  const md = new MarkdownIt();\n\n  const options = {\n\n    styleOptions: {\n      heading: styles.bold,\n      firstHeading: styles.underline,\n      code: styles.green,\n    },\n  };\n  md.use(terminal, options);\n  // Override some markdown terminal methods\n  const mdTerminalFenceOrgFn = md.renderer.rules.fence;\n  const mdTerminalHeadingOpenFn = md.renderer.rules.heading_open;\n  md.renderer.rules.fence = (...args) => trimStart(mdTerminalFenceOrgFn.apply(null, args));\n  md.renderer.rules.heading_open = (...args) => trim(mdTerminalHeadingOpenFn.apply(null, args));\n  return md.render(mdStr);\n}\n\n/**\n * Set of utilities.\n * @module utils\n * @type {object}\n */\n\nexport default {\n  md2html,\n  md2term,\n};\n"]}