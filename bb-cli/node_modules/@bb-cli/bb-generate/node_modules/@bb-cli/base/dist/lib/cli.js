'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _fs=require('fs');var _fs2=_interopRequireDefault(_fs);var _commander=require('commander');var _commander2=_interopRequireDefault(_commander);var _log=require('./log');var _log2=_interopRequireDefault(_log);var _utils=require('./utils');var _utils2=_interopRequireDefault(_utils);var _ui=require('./ui');var _ui2=_interopRequireDefault(_ui);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var Command=_commander2.default.Command;/**
 * copied from the Commander
 * @private
 */// import the command instance
/**
 * ------------------------------------------------------------------------
 * CLI module
 * ------------------------------------------------------------------------
 */function humanReadableArgName(arg){var isVariadic=arg.variadic===true?'...':'';var tplOutput=''+arg.name+isVariadic;return arg.required?'<'+tplOutput+'>':'['+tplOutput+']';}/**
 * copied from the Commander
 * @private
 */function pad(str,width){var len=Math.max(0,width-str.length);return str+Array(len+1).join(' ');}/**
 * Set the program version to `str`.
 *
 * This method auto-registers the "-v, --version" flag
 * which will print the version number when passed.
 *
 * @param {String} str
 * @param {String} flags
 * @return {Command} for chaining
 * @override
 */Command.prototype.version=function version(str){var flags=arguments.length<=1||arguments[1]===undefined?'-v, --version':arguments[1];if(arguments.length===0)return this._version;this._version=str;this.option(flags,'output the version number');this.on('version',function(){process.stdout.write(str+'\n');process.exit(0);});return this;};/**
 * eslint no-underscore-dangle: "off"
 * @override
 * @returns {string} Help information string
 */// Ignore commander's private prop. notation using '_'
/* eslint no-underscore-dangle: "off" */Command.prototype.helpInformation=function helpInformation(){var headingOptions=_ui2.default.colors.heading('OPTIONS: ');var headingDescription=_ui2.default.colors.heading('NAME: ');var headingUsage=_ui2.default.colors.heading('SYNOPSIS: ');var desc=this._description?[headingDescription,this.name()+' - '+this._description,'']:[];var cmdHelp=this.commandHelp();var optHelp=this.optionHelp();var manHelp=this._man;var cmds=cmdHelp||[];var opts=optHelp?optHelp.replace(/^/gm,'  '):[];var cmdName=this._name;if(this._alias){cmdName=cmdName+' | '+this._alias;}var usage=[headingUsage,cmdName+' '+this.usage(),''];var options=[headingOptions,opts];return desc.concat(usage).concat(cmds).concat(options).concat(manHelp).join('\n');};/**
 * @override
 * @public
 * @returns {string} Help information string
 */Command.prototype.commandHelp=function commandHelp(){if(!this.commands.length)return'';var headingTitle=_ui2.default.colors.heading('COMMANDS:');var commands=this.commands.filter(function(cmd){return!cmd._noHelp;}).map(function(cmd){var args=cmd._args.map(function(arg){return humanReadableArgName(arg);}).join(' ');var alias=cmd._alias?'| ${cmd._alias}':'';var options=cmd.options.length?'[options]':'';var tplCmd=cmd._name+' '+alias+' '+args+' '+options+' '+cmd._description;return[tplCmd];});var width=commands.reduce(function(max,command){return Math.max(max,command[0].length);},0);var addPadding=function addPadding(cmd){return pad(cmd[0],width)+(cmd[1]?cmd[1]:'');};return[headingTitle,commands.map(addPadding).join('\n').replace(/^/gm,'  '),''];};/**
 * Load and convert the markdown file for help output
 *
 * @public
 * @param  {string} filePath Read from this file path
 * @returns {cli}          Command instance
 */Command.prototype.man=function man(filePath){var manContent='';try{manContent=_utils2.default.md2term(_fs2.default.readFileSync(filePath,'utf8').toString());_log2.default.verbose('MAN',''+filePath);}catch(err){_log2.default.error(err);}this._man='\n'+manContent;return this;};/**
 * CLI parser based on [commander](https://github.com/tj/commander.js/)
 * with some additions and overrides.
 *
 * @module cli
 * @link https://github.com/tj/commander.js/
 * @type {object}
 * @example
 * Create a main command with 3 sub-commands:
 *
 * ``` javascript
 * import { cli } from '@bb-cli/base';
 *
 * cli.version('0.0.1')
 *   .command('install [...packages]', 'install one or more packages')
 *   .command('search [query]', 'search with optional query')
 *   .command('list', 'list packages installed', {isDefault: true})
 *   .parse(process.argv);
 *```
 *
 * Create the `install` sub-command:
 *
 * ``` javascript
 * import { cli } from '@bb-cli/base';
 *
 * cli
 *   .description('Install package from registry')
 *   .arguments('[...packages]', 'install one or more packages')
 *   .option('-f, --force [force]', 'force installation ', false)
 *   .option('-r, --registry [registry]', 'registry host ')
 *   .alias('i')
 *   .man( path.resolve(__dirname, '../../man/install.md'))
 *   .parse(process.argv);
 *
 * let packages = cli.args; // get the packages as variadic arguments
 * let force = cli.force  // get the force option
 *```
 */exports.default=_commander2.default;
//# sourceMappingURL=cli.js.map