{"version":3,"sources":["../../src/lib/cli.js"],"names":["Command","humanReadableArgName","arg","isVariadic","variadic","tplOutput","name","required","pad","str","width","len","Math","max","length","Array","join","prototype","version","flags","arguments","_version","option","on","process","stdout","write","exit","helpInformation","headingOptions","colors","heading","headingDescription","headingUsage","desc","_description","cmdHelp","commandHelp","optHelp","optionHelp","manHelp","_man","cmds","opts","replace","cmdName","_name","_alias","usage","options","concat","commands","headingTitle","filter","cmd","_noHelp","map","args","_args","alias","tplCmd","reduce","command","addPadding","man","filePath","manContent","md2term","readFileSync","toString","verbose","err","error"],"mappings":"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","file":"cli.js","sourcesContent":["/**\n * ------------------------------------------------------------------------\n * CLI module\n * ------------------------------------------------------------------------\n */\n\nimport fs from 'fs';\nimport cli from 'commander'; // import the command instance\nimport log from './log';\nimport utils from './utils';\nimport ui from './ui';\n\nconst Command = cli.Command;\n/**\n * copied from the Commander\n * @private\n */\nfunction humanReadableArgName(arg) {\n  const isVariadic = arg.variadic === true ? '...' : '';\n  const tplOutput = `${arg.name}${isVariadic}`;\n  return arg.required ? `<${tplOutput}>` : `[${tplOutput}]`;\n}\n/**\n * copied from the Commander\n * @private\n */\nfunction pad(str, width) {\n  const len = Math.max(0, width - str.length);\n  return str + Array(len + 1).join(' ');\n}\n\n/**\n * Set the program version to `str`.\n *\n * This method auto-registers the \"-v, --version\" flag\n * which will print the version number when passed.\n *\n * @param {String} str\n * @param {String} flags\n * @return {Command} for chaining\n * @override\n */\n\nCommand.prototype.version = function version(str, flags = '-v, --version') {\n  if (arguments.length === 0) return this._version;\n  this._version = str;\n  this.option(flags, 'output the version number');\n  this.on('version', () => {\n    process.stdout.write(`${str}\\n`);\n    process.exit(0);\n  });\n  return this;\n};\n/**\n * eslint no-underscore-dangle: \"off\"\n * @override\n * @returns {string} Help information string\n */\n\n// Ignore commander's private prop. notation using '_'\n/* eslint no-underscore-dangle: \"off\" */\n\nCommand.prototype.helpInformation = function helpInformation() {\n  const headingOptions = ui.colors.heading('OPTIONS: ');\n  const headingDescription = ui.colors.heading('NAME: ');\n  const headingUsage = ui.colors.heading('SYNOPSIS: ');\n  const desc = this._description\n              ? [headingDescription, `${this.name()} - ${this._description}`, '']\n              : [];\n\n  const cmdHelp = this.commandHelp();\n  const optHelp = this.optionHelp();\n  const manHelp = this._man;\n  const cmds = cmdHelp || [];\n  const opts = optHelp ? optHelp.replace(/^/gm, '  ') : [];\n  let cmdName = this._name;\n  if (this._alias) {\n    cmdName = `${cmdName} | ${this._alias}`;\n  }\n  const usage = [headingUsage, `${cmdName} ${this.usage()}`, ''];\n  const options = [headingOptions, opts];\n  return desc\n    .concat(usage)\n    .concat(cmds)\n    .concat(options)\n    .concat(manHelp)\n    .join('\\n');\n};\n/**\n * @override\n * @public\n * @returns {string} Help information string\n */\n\nCommand.prototype.commandHelp = function commandHelp() {\n  if (!this.commands.length) return '';\n  const headingTitle = ui.colors.heading('COMMANDS:');\n  const commands = this.commands.filter(cmd => !cmd._noHelp)\n    .map(cmd => {\n      const args = cmd._args.map(arg => humanReadableArgName(arg)).join(' ');\n      const alias = cmd._alias ? '| ${cmd._alias}' : '';\n      const options = cmd.options.length ? '[options]' : '';\n      const tplCmd = `${cmd._name} ${alias} ${args} ${options}`;\n      return [tplCmd, cmd._description];\n    });\n  const width = commands.reduce((max, command) => Math.max(max, command[0].length), 0);\n  const addPadding = cmd => pad(cmd[0], width) + (cmd[1] ? cmd[1] : '');\n  return [headingTitle, commands.map(addPadding).join('\\n').replace(/^/gm, '  '), ''];\n};\n\n/**\n * Load and convert the markdown file for help output\n *\n * @public\n * @param  {string} filePath Read from this file path\n * @returns {cli}          Command instance\n */\n\nCommand.prototype.man = function man(filePath) {\n  let manContent = '';\n  try {\n    manContent = utils.md2term(fs.readFileSync(filePath, 'utf8').toString());\n    log.verbose('MAN', `${filePath}`);\n  } catch (err) {\n    log.error(err);\n  }\n  this._man = `\\n${manContent}`;\n  return this;\n};\n\n/**\n * CLI parser based on [commander](https://github.com/tj/commander.js/)\n * with some additions and overrides.\n *\n * @module cli\n * @link https://github.com/tj/commander.js/\n * @type {object}\n * @example\n * Create a main command with 3 sub-commands:\n *\n * ``` javascript\n * import { cli } from '@bb-cli/base';\n *\n * cli.version('0.0.1')\n *   .command('install [...packages]', 'install one or more packages')\n *   .command('search [query]', 'search with optional query')\n *   .command('list', 'list packages installed', {isDefault: true})\n *   .parse(process.argv);\n *```\n *\n * Create the `install` sub-command:\n *\n * ``` javascript\n * import { cli } from '@bb-cli/base';\n *\n * cli\n *   .description('Install package from registry')\n *   .arguments('[...packages]', 'install one or more packages')\n *   .option('-f, --force [force]', 'force installation ', false)\n *   .option('-r, --registry [registry]', 'registry host ')\n *   .alias('i')\n *   .man( path.resolve(__dirname, '../../man/install.md'))\n *   .parse(process.argv);\n *\n * let packages = cli.args; // get the packages as variadic arguments\n * let force = cli.force  // get the force option\n *```\n */\n\nexport default cli;\n"]}