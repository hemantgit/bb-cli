{"version":3,"sources":["../../src/lib/error.js"],"names":["CommandError","settings","implementationContext","name","type","message","code","isCommandError","Error","captureStackTrace","error","inherits"],"mappings":";;;;;;AAAA;;;;;;AAEA,SAASA,YAAT,GAA4D;AAAA,MAAtCC,QAAsC,uEAA3B,EAA2B;AAAA,MAAvBC,qBAAuB;;AAC1D,OAAKC,IAAL,GAAY,cAAZ;AACA,OAAKC,IAAL,GAAYH,SAASG,IAAT,IAAiB,SAA7B;AACA,OAAKC,OAAL,GAAeJ,SAASI,OAAT,IAAoB,oBAAnC;AACA,OAAKC,IAAL,GAAYL,SAASK,IAAT,IAAiB,CAA7B;AACA,OAAKC,cAAL,GAAsB,IAAtB;AACAC,QAAMC,iBAAN,CAAwB,IAAxB,EAA8BP,yBAAyBF,YAAvD;AACD;;AAED,SAASU,KAAT,CAAeT,QAAf,EAAyB;AACvB,SAAO,IAAID,YAAJ,CAAiBC,QAAjB,EAA2BS,KAA3B,CAAP;AACD;;AAED,eAAKC,QAAL,CAAcX,YAAd,EAA4BQ,KAA5B;AACA;;;;;;;;;;;;;;;;;;;;;;kBAsBeE,K","file":"error.js","sourcesContent":["import util from 'util';\n\nfunction CommandError(settings = {}, implementationContext) {\n  this.name = 'CommandError';\n  this.type = settings.type || 'Command';\n  this.message = settings.message || 'An error occurred.';\n  this.code = settings.code || 1;\n  this.isCommandError = true;\n  Error.captureStackTrace(this, implementationContext || CommandError);\n}\n\nfunction error(settings) {\n  return new CommandError(settings, error);\n}\n\nutil.inherits(CommandError, Error);\n/**\n * Create the new instance of the CommandError object,\n * ensuring that it properly extends from the Error class.\n * @module error\n * @type {object}\n * @example\n * Setting up the log header:\n *\n * ```javascript\n * import { error } from '@bb-cli/base';\n *\n * const out = sh.exec('ls', { silent: true });\n * if (out.code !== 0) {\n *   throw error({\n *     type: 'Shell.Exec',\n *     code: out.code,\n *     message: out.stderr.trim(),\n *   });\n * }\n * ```\n */\n\nexport default error;\n\n"]}