{"version":3,"sources":["../../src/lib/utils.js"],"names":["md2html","mdStr","md","render","md2term","options","styleOptions","heading","bold","firstHeading","underline","code","green","use","mdTerminalFenceOrgFn","renderer","rules","fence","mdTerminalHeadingOpenFn","heading_open","args","apply"],"mappings":";;;;;;AAKA;;;;AACA;;;;AACA;;AACA;;;;;;AAGA;;;;;;;;;;;;AAXA;;;;;AAuBA,SAASA,OAAT,CAAiBC,KAAjB,EAAwB;AACtB,MAAMC,KAAK,0BAAX;AACA,SAAO,kBAAKA,GAAGC,MAAH,CAAUF,KAAV,CAAL,CAAP;AACD;AACD;;;;;;;;;;;;AAYA,SAASG,OAAT,CAAiBH,KAAjB,EAAwB;AACtB,MAAMC,KAAK,0BAAX;;AAEA,MAAMG,UAAU;;AAEdC,kBAAc;AACZC,eAAS,qBAAOC,IADJ;AAEZC,oBAAc,qBAAOC,SAFT;AAGZC,YAAM,qBAAOC;AAHD;AAFA,GAAhB;AAQAV,KAAGW,GAAH,+BAAiBR,OAAjB;AACA;AACA,MAAMS,uBAAuBZ,GAAGa,QAAH,CAAYC,KAAZ,CAAkBC,KAA/C;AACA,MAAMC,0BAA0BhB,GAAGa,QAAH,CAAYC,KAAZ,CAAkBG,YAAlD;AACAjB,KAAGa,QAAH,CAAYC,KAAZ,CAAkBC,KAAlB,GAA0B;AAAA,sCAAIG,IAAJ;AAAIA,UAAJ;AAAA;;AAAA,WAAa,uBAAUN,qBAAqBO,KAArB,CAA2B,IAA3B,EAAiCD,IAAjC,CAAV,CAAb;AAAA,GAA1B;AACAlB,KAAGa,QAAH,CAAYC,KAAZ,CAAkBG,YAAlB,GAAiC;AAAA,uCAAIC,IAAJ;AAAIA,UAAJ;AAAA;;AAAA,WAAa,kBAAKF,wBAAwBG,KAAxB,CAA8B,IAA9B,EAAoCD,IAApC,CAAL,CAAb;AAAA,GAAjC;AACA,SAAOlB,GAAGC,MAAH,CAAUF,KAAV,CAAP;AACD;;AAED;;;;;;kBAMe;AACbD,kBADa;AAEbI;AAFa,C","file":"utils.js","sourcesContent":["/**\n * ------------------------------------------------------------------------\n * Utilities module\n * ------------------------------------------------------------------------\n */\nimport MarkdownIt from 'markdown-it';\nimport terminal from 'markdown-it-terminal';\nimport { trimStart, trim } from 'lodash';\nimport styles from 'ansi-styles';\n\n\n/**\n * Converts markdown to html output\n * @param  {string} mdStr Markdown content string\n * @returns {string}       html string\n * @memberof module:utils\n * @example\n * Basic Example\n *\n * ```javascript\n * const htmlStr = utils.md2html(fs.readFileSync('some-markdown-file.md', 'utf8').toString());\n * ```\n */\nfunction md2html(mdStr) {\n  const md = new MarkdownIt();\n  return trim(md.render(mdStr));\n}\n/**\n * @todo  Make it work with colors instead of ansi-styles\n * @param  {string} mdStr markdown content string\n * @memberof module:utils\n * @returns {string}\n * @example\n * Basic Example\n *\n * ```javascript\n * const termMdOut = utils.md2term(fs.readFileSync('some-markdown-file.md', 'utf8').toString());\n * ```\n */\nfunction md2term(mdStr) {\n  const md = new MarkdownIt();\n\n  const options = {\n\n    styleOptions: {\n      heading: styles.bold,\n      firstHeading: styles.underline,\n      code: styles.green,\n    },\n  };\n  md.use(terminal, options);\n  // Override some markdown terminal methods\n  const mdTerminalFenceOrgFn = md.renderer.rules.fence;\n  const mdTerminalHeadingOpenFn = md.renderer.rules.heading_open;\n  md.renderer.rules.fence = (...args) => trimStart(mdTerminalFenceOrgFn.apply(null, args));\n  md.renderer.rules.heading_open = (...args) => trim(mdTerminalHeadingOpenFn.apply(null, args));\n  return md.render(mdStr);\n}\n\n/**\n * Set of utilities.\n * @module utils\n * @type {object}\n */\n\nexport default {\n  md2html,\n  md2term,\n};\n"]}