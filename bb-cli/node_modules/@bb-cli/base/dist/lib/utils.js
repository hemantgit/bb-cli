'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _markdownIt = require('markdown-it');

var _markdownIt2 = _interopRequireDefault(_markdownIt);

var _markdownItTerminal = require('markdown-it-terminal');

var _markdownItTerminal2 = _interopRequireDefault(_markdownItTerminal);

var _lodash = require('lodash');

var _ansiStyles = require('ansi-styles');

var _ansiStyles2 = _interopRequireDefault(_ansiStyles);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Converts markdown to html output
 * @param  {string} mdStr Markdown content string
 * @returns {string}       html string
 * @memberof module:utils
 * @example
 * Basic Example
 *
 * ```javascript
 * const htmlStr = utils.md2html(fs.readFileSync('some-markdown-file.md', 'utf8').toString());
 * ```
 */
/**
 * ------------------------------------------------------------------------
 * Utilities module
 * ------------------------------------------------------------------------
 */
function md2html(mdStr) {
  var md = new _markdownIt2.default();
  return (0, _lodash.trim)(md.render(mdStr));
}
/**
 * @todo  Make it work with colors instead of ansi-styles
 * @param  {string} mdStr markdown content string
 * @memberof module:utils
 * @returns {string}
 * @example
 * Basic Example
 *
 * ```javascript
 * const termMdOut = utils.md2term(fs.readFileSync('some-markdown-file.md', 'utf8').toString());
 * ```
 */
function md2term(mdStr) {
  var md = new _markdownIt2.default();

  var options = {

    styleOptions: {
      heading: _ansiStyles2.default.bold,
      firstHeading: _ansiStyles2.default.underline,
      code: _ansiStyles2.default.green
    }
  };
  md.use(_markdownItTerminal2.default, options);
  // Override some markdown terminal methods
  var mdTerminalFenceOrgFn = md.renderer.rules.fence;
  var mdTerminalHeadingOpenFn = md.renderer.rules.heading_open;
  md.renderer.rules.fence = function () {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return (0, _lodash.trimStart)(mdTerminalFenceOrgFn.apply(null, args));
  };
  md.renderer.rules.heading_open = function () {
    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    return (0, _lodash.trim)(mdTerminalHeadingOpenFn.apply(null, args));
  };
  return md.render(mdStr);
}

/**
 * Set of utilities.
 * @module utils
 * @type {object}
 */

exports.default = {
  md2html: md2html,
  md2term: md2term
};
//# sourceMappingURL=utils.js.map